# Magick IRC Services
#
# (c) 2005 The Neuromancy Society <info@neuromancy.net>
#
# The above copywright may not be removed under any circumstances,
# however it may be added to if any modifications are made to this
# file.  All modified code must be clearly documented and labelled.
#
# This code is released under the GNU General Public License v2.0 or better.
# The full text of this license should be contained in a file called
# COPYING distributed with this code.  If this file does not exist,
# it may be viewed here: http://www.neuromancy.net/license/gpl.html
#
# =======================================================================
# $Id$
# =======================================================================
#
# For official changes (by The Neuromancy Society), please
# check the ChangeLog* files that come with this distribution.
#
# Third Party Changes (please include e-mail address):
#
# N/A
#
# =======================================================================

# Storage configuration file.
#
# Please be aware of the following syntactical rules in this file.
#
# This file is divided into sections.  A key/value pair in one section has
# no baring on the same key/value pair in another section.  Subsections
# are delimited by the '.' character.  For the most part, subsections are
# not needed if the 'parent' section is not needed.  Unlike a traditional
# INI file, some keys in this file are permitted to appear multiple times
# in the same section.
#
# Each comment before a field in this file is prefixed by a code indicatng
# whether the field is required or not.  A code of '[REQ]' indicates that
# the field is required if the section it is in is required.  A code of
# '[OPT]' indicates the field may be omitted if you just wish the default
# to be taken.  Any optional value will also include a '[DEF]' code that
# will indicate the default value if the field is omitted.
#
# When specifying a value that is to be interpereted as a duration, you
# may either spell out the full words (minutes, seconds, etc) or you may
# use the following abbreviations to represent the equivalent units:
#   y = years    m = months     w = weeks      d = day
#   h = hours    n = minutes    s = seconds
# The seconds value may also be specified as a fractional number.  Also,
# you may specify a higher value than the 'natural' boundary of any unit,
# for example its perfectly valid to say 120 seconds to mean 2 minutes.
# A unit of seconds is assumed if no time unit is specified.
#
# Similarly, when specifying values indicating a size (such as kilobytes),
# you may use the following abbreviations to represent the equivalent units:
#   e = exabytes     p = petabytes    t = terabytes    g = gigabytes
#   m = megabytes    k = kilobytes    b = bytes
# As with duration values, going above the 'natural' buondaries of any unit
# is allowed (ie. 2048 bytes to mean 2 kb).  Additionally, you may suffix any
# unit abbreviation (except bytes) with 'b' without altering its meaning, so
# 5kb is equivalent to just 5k.  A unit of bytes is assumed if no size unit is
# specified.
# 
# Use of the '#' character will make any line a comment from that point on,
# and as such the '#' character may not be used in any field.  To represent
# a channel, the '&' channel may be used to replace the '#' character.  We
# only support channels prefixed with a '&' (representing a '#') or a '+'.
#
# Any field requiring a path (either a directory OR file) may have that path
# specified in either absolute or relative terms.  If a relative path is 
# given, it will be relative to the working working directory of Magick,
# unless otherwise specified.  The working directory of Magick will always
# be the current directory where Magick was started from unless the --dir
# (-D) command line option is used.

# +--------------+
# | Main Section |
# +--------------+
#
# Also known as the 'null' section, since there is no explicit section
# name.  Many fields in this section also have command-line parameters.

# [REQ] The backend mechanism to use for storing all persistent data.  Your
# choice hear will determine which subsection of the storage section will be
# relevent.  The backends you may choose will depend on how Mantra was
# compiled (which in turn is based on what was on your system at the time of
# compilation).  The possible options are:
#   - inifile (guarenteed to exist)
#   - berkeleydb
#   - xml
#   - mysql
#   - postgresql
#   - sqlite
#storage = inifile
storage = postgresql

# +-----------------+
# | Storage Section |
# +-----------------+
#
# These options pretain to all storage types, regardless of which backend is
# in use.  As such, this section must always exist.
[storage]

# [OPT] The hash to use to use to 'encrypt' all passwords.  Some hashing
# mechanisms may not be available if they were not available to Mantra when
# it was compiled.  The possible options are:
#   - NONE (passwords are stored clear-text!)
#   - MD5
#   - MD4
#   - MD2
#   - MDC2
#   - SHA0
#   - SHA1
#   - RIPEMD
# [DEF] NONE
password-hash = SHA1

# [OPT] This determines whethere we should try to retrieve an entry (such as a
# registered nickname, channel, etc) from our backend storage if we don't find
# it in memory.  In most cases, this should be false, since on startup we will
# learn about each record that is valid, and keep track when new ones are added
# or removed.  However this MIGHT be useful if there is the possibility that
# an external application may modify our backend storage directly and add or
# remove an entry directly.  Please note, if the external application only
# modifies existing records, this should still be set to false.
# [DEF] false
deep-lookup = false

# [OPT] Do we wish to load all re-load all entries after saving them.  This,
# again is a rare situation, and used for similar reasons as deep-lookup.
# This option would be used if again, an external application is modifying
# the backend data storage, but it does not matter so much that the new
# entry exist immediately (ie. it can exist up to <save-time> later).  This
# method is more efficient but less accurate than deep lookups, but as with
# deep lookups, it should not be used unless absolutely necessary.
# [DEF] false
load-after-save = false

# [OPT] When we load a field from our storage backend, Magick will cache that
# value so that if it is requested again within the cache period, we will not
# have to do a secondary lookup.  This option determines how old the cached
# data may be before we look it up directly from the storage backend again.
# When a field is set from within magick, the cache period is reset.
#
# If you have a storage backend mechanism that keeps all data in memory, and
# only writes it to disk, this can be disabled to save memory (though if you
# have enough memory, keeping this enabled does speed things up slightly).
# Otherwise, if you are certain nothing outside of Magick will modify the data
# directly, then you can set this to a relatively long time to alleviate load
# on the storage backend.
# [DEF] 5 minutes
cache-expire = 5n

# [OPT] Should Magick care about extra fields in the storage backend.  This is
# used if you have extra data in your data schema for other purposes (eg. an
# external application).  If this is set to false, then Magick will complain if
# it detects data it does not know how to handle.
# [DEF] false
tollerant = false

# +--------------------------+
# | INI File Storage Section |
# +--------------------------+
#
# These options are only required when the storage option in the main section
# is set to 'inifile'.  The INI file mechanism stores all data in INI file format.
# This storage mechanism is guarenteed to exist, and is the simplest (though not
# the most efficient) storage mechanism.
#
# The INI file storage mechanism stores all data in memory and periodically saves
# data to the final stage, as such the only way for an external modification of the
# data to become 'live' is via. a restart without saving or a manual RELOAD command,
# which will lose any changes that had happened since the last save.
#
# This should be used as a storage mechanism of last resort if you have any others
# available, as INI files do not have strong typing or any kind of data dictionary
# to ensure the data is correct, and is very rigid in its layout requirements.
[storage.inifile]

# [REQ] Stages are layers that the formatted data will go through to be saved.
# There are two kinds of stages, 'intermediary' stages and 'final' stages.  Only
# the final stage is required, and you may only have one final stage, though you
# may have as many intermediary stages as you like.
#
# The final stage more or less determines the final destination of the data, and
# may be one of:
#   - file (the data is stored on disk)
#   - net (the data is sent/read from a socket)
# Intermediary stages can do anything from modifying the data that 'goes through'
# it to simply verifying the data is correct that is going through it.  The
# intermediary stages are:
#   - verify (check to ensure the data is correct)
#   - compress
#   - crypt (encrypt/decrypt the data)
#
# Stages are specified in the order they would be used when SAVING the data,
# for example verify THEN compress THEN encrypt THEN file.
#stage = verify
#stage = compress
#stage = crypt
stage = file

# +--------------------------------+
# | Verify Stage Section (inifile) |
# +--------------------------------+
#
# These options control the Verify stage as used by the INI file storage backend.
# This section should be commented out (or removed) if you do not use the INI
# file storage backend or the verify stage with the INI file storage backend.
#[storage.inifile.stage.verify]

# [OPT] The offset in the stream where we would expect to find the verification
# string.
# [DEF] 0
#offset = 0

# [REQ] The string we will look for to ensure that our data is correctly formatted.
#string = 

# [OPT] Whether we will ignore a failure to verify our data integrity, or cause us
# to abort saving or loading of the data.
# [DEF] false
#nice = false

# +----------------------------------+
# | Compress Stage Section (inifile) |
# +----------------------------------+
#
# These options control the Compress stage as used by the INI file storage
# backend.  This section should be commented out (or removed) if you do not use
# the INI file storage backend or the compress stage with the INI file storage
# backend.
#[storage.inifile.stage.compress]

# [REQ] The compression algorithm to use to compress the data.  Different
# algorithms have different speed/size efficiencies.  Only mechanisms that
# existed when Mantra was compiled will be available.  The options are:
#   - LZW (always available)
#   - ZLIB (aka. gzip)
#   - BZIP2
#type = BZIP2

# [OPT] How hard we should try and compress the data through this stream.  This
# directly affects our CPU usage during data saves.  Often at some point the
# compression gained by a higher compression level is not worth the extra CPU
# cycles expended to bring that gain.  Valid values are between 0 (none) and
# 9 (maximum).  This has no baring on decompression (ie. data load).
# [DEF] 6
#level = 6

# +------------------------------------+
# | Encryption Stage Section (inifile) |
# +------------------------------------+
#
# These options control the Encryption stage as used by the INI file storage
# backend.  This section should be commented out (or removed) if you do not use
# the INI file storage backend or the encryption stage with the INI file storage
# backend.
#[storage.inifile.stage.crypt]

# [REQ] The encryption algorithm to use to encrypt the data.  This option is
# in part personal preference, but also should be based on the security vs.
# performance vs. necessity paradigm.  Some algorithms are more secure than
# others, some perform better.  You must determine how much security you NEED
# for your data (and how much CPU you are willing to spend to achieve it), and
# choose your encryption methodology appropriately.  Only methodologies that
# existed when Mantra was compiled will be available.  The options are:
#   - XOR (always available, VERY weak!)
#   - AES
#   - DES
#   - DES3 (aka. triple-DES)
#   - BLOWFISH
#   - IDEA
#   - CAST
#   - RC2
#   - RC5
#
# You should do some investigation of each methodology before choosing one.
#type = AES

# [REQ] How many key bits to use.  Different encryption methodologies accept
# different key bit values, the more key bits the stronger the encryption, but
# also the longer it takes to encrypt anything.  All values must be divisible
# by 8 and accepted the specific encryption methodology in use.  By convention,
# you can use the following values:
#   - XOR: any value up to 4096
#   - AES: any value between 128 and 256
#   - DES: 64 only
#   - DES3: 192 only
#   - BLOWFISH: any value between 32 and 448
#   - IDEA: 128 only
#   - CAST: any value between 40 and 128
#   - RC2: any value up to 2048
#   - RC5: any value up to 1024
#bits = 256

# [OPT] A common technique to add security is to obscure the actual key used
# for encrypting/decrypting the database.  This is done usually by means of
# creating a hash of the key you pass.  This option allows you to select which
# hashing mechanism will be used t obscure your database password.  As with
# encryption, only hashing mechanisms that were available when Mantra was
# compiled will be available here.  The options are:
#   - NONE (always available, no obscuring)
#   - MD5
#   - MD4
#   - MD2
#   - MDC2
#   - SHA0
#   - SHA1
#   - RIPEMD
#
# As with encryption, this is more personal choice however some hashing
# mechanisms are stronger (have less 'collisions') than others.  In terms of
# CPU costs, however, the difference is neglegable.
# [DEF] NONE
#hash = RIPEMD

# [OPT] The key to use when encrypting/decrypting.  This the 'holy grail', as
# it were, and as such, if you use this option, you make sure that this file
# NEVER falls into untrustworthy hands.  Either this or the keyfile option must
# be specified (but never both).
# [DEF] (none)
#key = blah

# [OPT] If you are uncomfortable putting the encryption key into the config
# file, or your key is large or spans multiple lines, then you can instead have
# the encryption key in a separate file.  Just as with the 'key' option, the
# file that contains the key can never be allowed to fall into untrustworthy
# hands.  The entire contents of the keyfile are taken as the key, so you must
# make sure the contents do NOT change or you will not be able to load your DB.
# [DEF] (none)
#keyfile = magick.key

# +------------------------------------+
# | File Final Stage Section (inifile) |
# +------------------------------------+
#
# These options control the file final stage as used by the INI file storage
# backend.  This section should be commented out (or removed) if you do not use
# the INI file storage backend or the file final stage with the INI file storage
# backend.
[storage.inifile.stage.file]

# [REQ] Name of the file that we will store all data (once it has gone through
# any other streams) to.  This file must be readable and writable, and should be
# on some kind of permanent medium.
name = magick.mnd

# [OPT] Name of the 'temporary' file that we will write to.  This is a safety
# precaution to prevent corruption of the database in case of something like
# a sudden power loss or system crash during the save process.  If specified,
# we will actually write our data to the temporary file, and then when it is
# complete, remove the 'real' file and rename the temporary file to it.  This
# means the temporary file should be on the same filesystem as the real file.
#
# This should only be disabled if you can guarentee that the write will complete,
# and there is another reason for not using this mechanism (for example, not
# having write access to any directory on the same filesystem as the real file,
# but having write access to the real file itself).
# [DEF] magick.mnd.tmp
tempname = magick.mnd.tmp

# +---------------------------------------+
# | Network Final Stage Section (inifile) |
# +---------------------------------------+
#
# These options control the network final stage as used by the INI file storage
# backend.  This section should be commented out (or removed) if you do not use
# the INI file storage backend or the network final stage with the INI file
# storage backend.
#
# While this mechanism does allow for remote data storage, or another application
# to handle the data storage, this is not a particularly intelligent mechanism.
[storage.inifile.stage.net]

# [REQ] The host (which must resolve) or IP address of where we will send the
# data.  We will not send any 'header' information, just the data.  The other
# end should just expect the data periodically.  The other end must also send
# us the complete database on connection (only).
host = 127.0.0.1

# [REQ] The port we will connect to on the above host.
port = 1234

# +---------------------+
# | XML Storage Section |
# +---------------------+
#
# These options are only required when the storage option in the main section
# is set to 'xml'.  This mechanism is only available if Mantra was compiled with
# XML support.
#
# The XML storage mechanism stores all data in memory and periodically saves the
# data to the final stage, as such the only way for an external modification of the
# data to become 'live' is via. a restart without saving or a manual RELOAD command,
# which will lose any changes that had happened since the last save.
[storage.xml]

# [REQ] Stages are layers that the formatted data will go through to be saved.
# There are two kinds of stages, 'intermediary' stages and 'final' stages.  Only
# the final stage is required, and you may only have one final stage, though you
# may have as many intermediary stages as you like.
#
# The final stage more or less determines the final destination of the data, and
# may be one of:
#   - file (the data is stored on disk)
#   - net (the data is sent/read from a socket)
# Intermediary stages can do anything from modifying the data that 'goes through'
# it to simply verifying the data is correct that is going through it.  The
# intermediary stages are:
#   - verify (check to ensure the data is correct)
#   - compress
#   - crypt (encrypt/decrypt the data)
#
# Stages are specified in the order they would be used when SAVING the data,
# for example verify THEN compress THEN encrypt THEN file.
stage = verify
#stage = compress
#stage = crypt
stage = file

# +----------------------------+
# | Verify Stage Section (xml) |
# +----------------------------+
#
# These options control the Verify stage as used by the XML storage backend.
# This section should be commented out (or removed) if you do not use the XML
# storage backend or the verify stage with the XML storage backend.
[storage.xml.stage.verify]

# [OPT] The offset in the stream where we would expect to find the verification
# string.
# [DEF] 0
offset = 0

# [REQ] The string we will look for to ensure that our data is correctly formatted.
string = <?xml version="1.0" encoding="UTF-8"?>

# [OPT] Whether we will ignore a failure to verify our data integrity, or cause us
# to abort saving or loading of the data.
# [DEF] false
nice = false

# +------------------------------+
# | Compress Stage Section (xml) |
# +------------------------------+
#
# These options control the Compress stage as used by the XML storage backend.
# This section should be commented out (or removed) if you do not use the XML
# storage backend or the compress stage with the XML storage backend.
#[storage.xml.stage.compress]

# [REQ] The compression algorithm to use to compress the data.  Different
# algorithms have different speed/size efficiencies.  Only mechanisms that
# existed when Mantra was compiled will be available.  The options are:
#   - LZW (always available)
#   - ZLIB (aka. gzip)
#   - BZIP2
#type = BZIP2

# [OPT] How hard we should try and compress the data through this stream.  This
# directly affects our CPU usage during data saves.  Often at some point the
# compression gained by a higher compression level is not worth the extra CPU
# cycles expended to bring that gain.  Valid values are between 0 (none) and
# 9 (maximum).  This has no baring on decompression (ie. data load).
# [DEF] 6
#level = 6

# +--------------------------------+
# | Encryption Stage Section (xml) |
# +--------------------------------+
#
# These options control the Encryption stage as used by the XML storage backend.
# This section should be commented out (or removed) if you do not use the XML
# storage backend or the encryption stage with the XML storage backend.
#[storage.xml.stage.crypt]

# [REQ] The encryption algorithm to use to encrypt the data.  This option is
# in part personal preference, but also should be based on the security vs.
# performance vs. necessity paradigm.  Some algorithms are more secure than
# others, some perform better.  You must determine how much security you NEED
# for your data (and how much CPU you are willing to spend to achieve it), and
# choose your encryption methodology appropriately.  Only methodologies that
# existed when Mantra was compiled will be available.  The options are:
#   - XOR (always available, VERY weak!)
#   - AES
#   - DES
#   - DES3 (aka. triple-DES)
#   - BLOWFISH
#   - IDEA
#   - CAST
#   - RC2
#   - RC5
#
# You should do some investigation of each methodology before choosing one.
#type = AES

# [REQ] How many key bits to use.  Different encryption methodologies accept
# different key bit values, the more key bits the stronger the encryption, but
# also the longer it takes to encrypt anything.  All values must be divisible
# by 8 and accepted the specific encryption methodology in use.  By convention,
# you can use the following values:
#   - XOR: any value up to 4096
#   - AES: any value between 128 and 256
#   - DES: 64 only
#   - DES3: 192 only
#   - BLOWFISH: any value between 32 and 448
#   - IDEA: 128 only
#   - CAST: any value between 40 and 128
#   - RC2: any value up to 2048
#   - RC5: any value up to 1024
#bits = 256

# [OPT] A common technique to add security is to obscure the actual key used
# for encrypting/decrypting the database.  This is done usually by means of
# creating a hash of the key you pass.  This option allows you to select which
# hashing mechanism will be used t obscure your database password.  As with
# encryption, only hashing mechanisms that were available when Mantra was
# compiled will be available here.  The options are:
#   - NONE (always available, no obscuring)
#   - MD5
#   - MD4
#   - MD2
#   - MDC2
#   - SHA0
#   - SHA1
#   - RIPEMD
#
# As with encryption, this is more personal choice however some hashing
# mechanisms are stronger (have less 'collisions') than others.  In terms of
# CPU costs, however, the difference is neglegable.
# [DEF] NONE
#hash = RIPEMD

# [OPT] The key to use when encrypting/decrypting.  This the 'holy grail', as
# it were, and as such, if you use this option, you make sure that this file
# NEVER falls into untrustworthy hands.  Either this or the keyfile option must
# be specified (but never both).
# [DEF] (none)
#key = blah

# [OPT] If you are uncomfortable putting the encryption key into the config
# file, or your key is large or spans multiple lines, then you can instead have
# the encryption key in a separate file.  Just as with the 'key' option, the
# file that contains the key can never be allowed to fall into untrustworthy
# hands.  The entire contents of the keyfile are taken as the key, so you must
# make sure the contents do NOT change or you will not be able to load your DB.
# [DEF] (none)
#keyfile = magick.key

# +--------------------------------+
# | File Final Stage Section (xml) |
# +--------------------------------+
#
# These options control the file final stage as used by the XML storage backend.
# This section should be commented out (or removed) if you do not use the XML
# storage backend or the file final stage with the XML storage backend.
[storage.xml.stage.file]

# [REQ] Name of the file that we will store all data (once it has gone through
# any other streams) to.  This file must be readable and writable, and should be
# on some kind of permanent medium.
name = magick.mnd

# [OPT] Name of the 'temporary' file that we will write to.  This is a safety
# precaution to prevent corruption of the database in case of something like
# a sudden power loss or system crash during the save process.  If specified,
# we will actually write our data to the temporary file, and then when it is
# complete, remove the 'real' file and rename the temporary file to it.  This
# means the temporary file should be on the same filesystem as the real file.
#
# This should only be disabled if you can guarentee that the write will complete,
# and there is another reason for not using this mechanism (for example, not
# having write access to any directory on the same filesystem as the real file,
# but having write access to the real file itself).
# [DEF] magick.mnd.tmp
tempname = magick.mnd.tmp

# +-----------------------------------+
# | Network Final Stage Section (xml) |
# +-----------------------------------+
#
# These options control the network final stage as used by the XML storage
# backend.  This section should be commented out (or removed) if you do not use
# the XML storage backend or the network final stage with the XML storage backend.
#
# While this mechanism does allow for remote data storage, or another application
# to handle the data storage, this is not a particularly intelligent mechanism.
[storage.xml.stage.net]

# [REQ] The host (which must resolve) or IP address of where we will send the
# data.  We will not send any 'header' information, just the data.  The other
# end should just expect the data periodically.  The other end must also send
# us the complete database on connection (only).
host = 127.0.0.1

# [REQ] The port we will connect to on the above host.
port = 1234

# +----------------------------+
# | PostgreSQL Storage Section |
# +----------------------------+
#
# These options are only required when the storage option in the main section
# is set to 'postgresql'.  This mechanism is only available if Mantra was compiled
# with PostgreSQL support.
#
# This is a 'live' mechanism, meaning that updates to the database are reflected
# immediately (barring any cache) in the live-running application.  This means that
# it is ideal for working along side third-party applications.
[storage.postgresql]

# [REQ] Name of the database we will connect to.
db-name = magick

# [OPT] Username we will use to connect to the database.  If this is not specified
# we will not specify a username (which means the database will probably take the
# username of the user Magick is running as).  This implies that some kind of trust
# or non-password based authentication mechanism must be in place.
# [DEF] (none)
user = prez

# [OPT] Password for the above username.  This is not valid without a user.
# [DEF] (none)
#password = blah

# [OPT] Host (must resolve) or IP address we will try to connect to for this
# database.  If this is not specified we will try to connect to the database
# running on the current system.
# [DEF] (none)
#host = 127.0.0.1

# [OPT] Port we try to connect to on the above host.  If not specified, the default
# port for this database will be used.  This is not valid without a host.
# [DEF] (none)
#port = 1234

# [OPT] How long should we wait for a database connection before timing out (and
# causing Magick to abort).  A value of 0 means we will wait forever.
# [DEF] 0
timeout = 0

# [OPT] Only allow a connection to the database if it can be SSL encrypted.  This
# is useful when the database is on a different server on a network you cannot
# completely trust nobody to be snooping on.  However, your database must have SSL
# enabled and configured correctly.
# [DEF] false
ssl-only = false

# [OPT] Maximum number of database connections we are allowed to have in our 'pool'.
# Because Magick is multi-threaded, we must have a pool of database connections to
# ensure that multiple threads can access the database at the same time.  This
# value limits how many connections we may have to the database, total.  A value
# of 0 means unlimited.
# [DEF] 0
#max-conn-count = 0

# [OPT] Maximum number of spare database connections are are allowed to have.  This
# value controls how many unused database connections we should keep around.  This
# is mainly used to ensure we don't tie up too many database connections, even during
# low volume periods.
# [DEF] 4
max-spare-count = 4

# +-----------------------+
# | MySQL Storage Section |
# +-----------------------+
#
# These options are only required when the storage option in the main section
# is set to 'mysql'.  This mechanism is only available if Mantra was compiled
# with MySQL support.
#
# This is a 'live' mechanism, meaning that updates to the database are reflected
# immediately (barring any cache) in the live-running application.  This means that
# it is ideal for working along side third-party applications.
[storage.mysql]

# [REQ] Name of the database we will connect to.
db-name = blah

# [OPT] Username we will use to connect to the database.  If this is not specified
# we will not specify a username (which means the database will probably take the
# username of the user Magick is running as).  This implies that some kind of trust
# or non-password based authentication mechanism must be in place.
# [DEF] (none)
user = user

# [OPT] Password for the above username.  This is not valid without a user.
# [DEF] (none)
password = pass

# [OPT] Host (must resolve) or IP address we will try to connect to for this
# database.  If this is not specified we will try to connect to the database
# running on the current system.
# [DEF] (none)
host = 127.0.0.1

# [OPT] Port we try to connect to on the above host.  If not specified, the default
# port for this database will be used.  This is not valid without a host.
# [DEF] (none)
port = 1234

# [OPT] How long should we wait for a database connection before timing out (and
# causing Magick to abort).  A value of 0 means we will wait forever.
# [DEF] 0
timeout = 0

# [OPT] Should communications between us and the database be compressed.  This is
# only useful if you're on a high-latency network (ie. not a LAN).
# [DEF] false
compression = false

# [OPT] Maximum number of database connections we are allowed to have in our 'pool'.
# Because Magick is multi-threaded, we must have a pool of database connections to
# ensure that multiple threads can access the database at the same time.  This
# value limits how many connections we may have to the database, total.  A value
# of 0 means unlimited.
# [DEF] 0
max-conn-count = 0

# [OPT] Maximum number of spare database connections are are allowed to have.  This
# value controls how many unused database connections we should keep around.  This
# is mainly used to ensure we don't tie up too many database connections, even during
# low volume periods.
# [DEF] 4
max-spare-count = 4

# +------------------------+
# | SQLite Storage Section |
# +------------------------+
#
# These options are only required when the storage option in the main section
# is set to 'sqlite'.  This mechanism is only available if Mantra was compiled
# with SQLite support.
#
# This is a 'live' mechanism, meaning that updates to the database are reflected
# immediately (barring any cache) in the live-running application.  This means that
# it is ideal for working along side third-party applications.
[storage.sqlite]

# [REQ] Name of the database we will connect to.
db-name = blah

# [OPT] Maximum number of database connections we are allowed to have in our 'pool'.
# Because Magick is multi-threaded, we must have a pool of database connections to
# ensure that multiple threads can access the database at the same time.  This
# value limits how many connections we may have to the database, total.  A value
# of 0 means unlimited.
# [DEF] 0
max-conn-count = 0

# [OPT] Maximum number of spare database connections are are allowed to have.  This
# value controls how many unused database connections we should keep around.  This
# is mainly used to ensure we don't tie up too many database connections, even during
# low volume periods.
# [DEF] 4
max-spare-count = 4

# +-----------------------------+
# | Berkeley DB Storage Section |
# +-----------------------------+
#
# These options are only required when the storage option in the main section
# is set to 'berkeleydb'.  This mechanism is only available if Mantra was compiled
# with Berkeley DB support.
#
# This is a 'live' mechanism, meaning that updates to the database are reflected
# immediately (barring any cache) in the live-running application.  This means that
# it is ideal for working along side third-party applications.
[storage.berkeleydb]

# [REQ] The directory where the database files are stored.  This directory will
# contain one database per table that Magick uses.  We should have permission to
# create files in this directory.
db-dir = .

# [OPT] Should we allow the database to be shared with other processes.  This allows
# for faster database operation, however if another application DOES modify the
# database, it will more than likely corrupt it.  This must be set to false if you
# expect third-party applications use your Berkeley DB.
# [DEF] true
private = true

# [OPT] The password we should use to encrypt our databases.  This is only supported
# on Berkeley DB v4.1 and above.  Unlike with INI file and XML storage mechanisms,
# the encryption scheme is determined by Berkeley DB itself and not specified here.
# The databases will not be encrypted if no password is set.
# [DEF] (none)
#password = 

# [OPT] Should we use the BTREE or HASH methodologies for storage.  This is an
# advanced feature.  The main difference between these two is that BTREE stores
# all records sequentially, and HASH in its own order.  Hash typically has a
# faster lookup time, however if you're going to create/use a third party app
# that relies on entries in the DB being in a specific order, you will have
# to use BTREE.
# More information here: http://www.sleepycat.com/docs/ref/am_conf/select.html
btree = false

# END FILE
