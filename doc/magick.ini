# Magick IRC Services
#
# (c) 2005 The Neuromancy Society <info@neuromancy.net>
#
# The above copywright may not be removed under any circumstances,
# however it may be added to if any modifications are made to this
# file.  All modified code must be clearly documented and labelled.
#
# This code is released under the GNU General Public License v2.0 or better.
# The full text of this license should be contained in a file called
# COPYING distributed with this code.  If this file does not exist,
# it may be viewed here: http://www.neuromancy.net/license/gpl.html
#
# =======================================================================
# $Id$
# =======================================================================
#
# For official changes (by The Neuromancy Society), please
# check the ChangeLog* files that come with this distribution.
#
# Third Party Changes (please include e-mail address):
#
# N/A
#
# =======================================================================

# Main configuration file.
#
# Please be aware of the following syntactical rules in this file.
#
# This file is divided into sections.  A key/value pair in one section has
# no baring on the same key/value pair in another section.  Subsections
# are delimited by the '.' character.  For the most part, subsections are
# not needed if the 'parent' section is not needed.  Unlike a traditional
# INI file, some keys in this file are permitted to appear multiple times
# in the same section.
#
# Each comment before a field in this file is prefixed by a code indicatng
# whether the field is required or not.  A code of '[REQ]' indicates that
# the field is required if the section it is in is required.  A code of
# '[OPT]' indicates the field may be omitted if you just wish the default
# to be taken.  Any optional value will also include a '[DEF]' code that
# will indicate the default value if the field is omitted.
#
# When specifying a value that is to be interpereted as a duration, you
# may either spell out the full words (minutes, seconds, etc) or you may
# use the following abbreviations to represent the equivalent units:
#   y = years    m = months     w = weeks      d = day
#   h = hours    n = minutes    s = seconds
# The seconds value may also be specified as a fractional number.  Also,
# you may specify a higher value than the 'natural' boundary of any unit,
# for example its perfectly valid to say 120 seconds to mean 2 minutes.
# A unit of seconds is assumed if no time unit is specified.
#
# Similarly, when specifying values indicating a size (such as kilobytes),
# you may use the following abbreviations to represent the equivalent units:
#   e = exabytes     p = petabytes    t = terabytes    g = gigabytes
#   m = megabytes    k = kilobytes    b = bytes
# As with duration values, going above the 'natural' buondaries of any unit
# is allowed (ie. 2048 bytes to mean 2 kb).  Additionally, you may suffix any
# unit abbreviation (except bytes) with 'b' without altering its meaning, so
# 5kb is equivalent to just 5k.  A unit of bytes is assumed if no size unit is
# specified.
# 
# Use of the '#' character will make any line a comment from that point on,
# and as such the '#' character may not be used in any field.  To represent
# a channel, the '&' channel may be used to replace the '#' character.  We
# only support channels prefixed with a '&' (representing a '#') or a '+'.
#
# Any field requiring a path (either a directory OR file) may have that path
# specified in either absolute or relative terms.  If a relative path is 
# given, it will be relative to the working working directory of Magick,
# unless otherwise specified.  The working directory of Magick will always
# be the current directory where Magick was started from unless the --dir
# (-D) command line option is used.

# +--------------+
# | Main Section |
# +--------------+
#
# Also known as the 'null' section, since there is no explicit section
# name.  Many fields in this section also have command-line parameters.

# [OPT] Directory that is the root of our language files structure.
# [DEF] lang
language-dir = lang

# [OPT] The default language to use for all log file entries, and messages
# that are not sent directly to a single user.
# [DEF] en_GB
language = en_GB

# [REQ] The server name we will advertise ourselves as when connecting to
# the network.  Although this does have to adhere to the rules of host
# names, it does not have to resolve.
server-name = services.neuromancy.net

# [OPT] The description of our 'server'.  This is only really displayed to
# the user when they execute a /WHOIS on one of the services.
# [DEF] Magick IRC Services
server-desc = Magick IRC Services

# [OPT] The IP address Magick will bind to for all socket connections.  This
# includes both connections to the IRC server, and any other connections that
# may be made (eg. DCCs).
# If you do not know what this is, then please do not specify it, and the
# appropriate interface will be chosen automatically based on the remote IP
# address of the connection.
# [DEF] (none)
bind = 127.0.0.1

# [REQ] The configuration file that contains the details of how the IRC daemon
# in use on your network behaves.
protocol = ircd/ircd.bahamut.ini

# [OPT] The file that will contain the process ID of Magick once it is running.
# [DEF] magick.pid
pidfile = magick.pid

# [OPT] The 'Message of the Day' file.  This file will be sent, verbatim, when
# someone executes a /MOTD command against the services server.
# [DEF] magick.motd
motdfile = magick.motd

# [OPT] The lowest level these services can be.  The services level is used
# to determine which set of services (assuming there is more than one set of
# Magick services on the network) are the current 'primary' services.  The
# actual services level of any set of services at any point in time is based
# on how much lag services detect to the rest of the network.  The services
# with the lowest 'actual' level will be the primary services at that point
# in time.
# [DEF] 1
level = 1

# [OPT] The maximum level these services will allow themselves to become.
# [DEF] 5
max-level = 5

# [OPT] The average lag to all servers (excluding the lowest and highest) that
# we will allow before increasing our 'actual' services level.  For example if
# the below is 15 seconds, when the average lag to all servers goes above 15s,
# after the highest and lowest times have been excluded, we will increase our
# actual level.  When it goes above 30s will will increase it again, 45 seconds
# and we will increase it a third time, and so on.  When the lag falls below
# the same threshold points, we will decrease our actual level accordingly.
# [DEF] 15 seconds
lag-time = 15s

# [OPT] How often to commit our databases to permanent storage.  Depending on
# which storage backend is in use, this value may actually do nothing, however
# if you have a storage backend that stores all data in memory and periodically
# commits that data to permanent storage, this is how often this will occur.
# [DEF] 5 minutes
save-time = 5n

# [REQ] This option stops Magick from running, pure and simple.  It is here to
# ensure that you at least look at the configuration file and alter it before
# just starting up Magick.  This must be set to 'false' for Magick to start.
stop = false

# [REQ] The servers Magick will attempt to connect to.  You may specify as
# many remote connection entries as you like, with the syntax of:
#   remote = <host> <port> <password> [numeric]
# Where <ip address> is the remote host (which MUST resolve) or ip address of
# the IRC server to connect to (which must be configured to allow us to
# connect to it as a server). <port> is a port that the IRC server is listening
# on.  <password> is the password that will be used in BOTH directions for
# the connection.  And [numeric] is an optional field that contains what OUR
# (ie. services) numeric will be when connected to this server.
#
# Server connections will be attempted in the order they are provided.
remote = 127.0.0.1 6667 MaGeeK

# [OPT] This option is used to both stop rogue admins linking in servers
# without getting permission first, and for enforcing certain rules as
# far as how servers may be linked together.  The syntax is:
#   allow = <server> [uplinks]
# Where <server> is the server (exactly as it appears in a server listing)
# that is allowed to connect to the network, and [uplinks] is a wildcarded
# mask describing who that server may connect to.  for example:
#   allow = leaf1.us.somenet.com *.us.somenet.com
# may be used to say that leaf1 may only connect to another server that ends
# in .us.somenet.com.  You may specify as many allow lines as you like, and
# even specify multiple allow lines for the same server.  If no [uplinks] are
# specified, then it is the same as putting in '*' (ie. the server may connect
# to any other server).
#
# This is an advanced feature and should not be used unless you really know
# what you are doing.  Please keep two things in mind when using allows:
#   1) If even one allow is specified, then EVERY SERVER that connects to
#      the network must also have an allow.
#   2) All allows are from the perspective of services.  So in that case,
#      'uplink' means the server closer to services, and 'server' (or 'leaf')
#      means the server farther away.
#
# [DEF] (none)
#allow = hub.somenet.com *.us.somenet.com

# [OPT] Other configuration files to include as if they were a part of this
# file.  You may use this option multiple times to specify more files.
# [DEF] (none)
include = magick.storage.ini
include = magick.log.ini

# +------------------+
# | Services Section |
# +------------------+
#
# This section defines specifics about the services clients, specifically.
[services]

# [OPT] The ident used by services users (ie. 'user' in nick!user@host).
# If this is not defined, the nickname of the services client (in lower case)
# will be used.
# [DEF] (none)
user = service

# [OPT] The host used by services users (ie. 'host' in nick!user@host).
# If this is not defined, the server-name from the main section will be
# used.  Although this does have to adhere to the rules of host names,
# it does not have to resolve.
# [DEF] (server-name)
host = somenet.com

# [OPT] The modes all services will set on themselves when they sign on.
# Any mode that a user could set upon themselves can be specified here,
# from +i (invisible) to +o (IRC operator).
# [DEF] (none)
mode = +s

# [OPT] The nicknames (space separated) that the nickname service will sign
# on to the network.  The first nickname specified will be the 'primary'
# nickname, ie. the one that will message users 'out of the blue', all other
# nicknames will by pseudonyms, ie. a user can interact with them just as
# they would the primary nickname, but the nickname will only respond to
# users, not message them out of the blue.
# If you do not specify anything here, nickname services will be disabled.
# [DEF] (none)
nickserv = NickServ

# [OPT] The 'real' name the nickname service will have.  This will only
# show up if a user does a /WHOIS on a nickname service nickname.
# [DEF] Nickname Service
nickserv-name = Nickname Service

# [OPT] The 'real' name the nickname enforcer (the services user that
# 'holds' any nickname during a nickname recovery) will have.  This will
# only show up if a user does a /WHOIS on a held nickname.
# [DEF] Nickname Enforcer
enforcer-name = Nickname Enforcer

# [OPT] The nicknames (space separated) that the channel service will sign
# on to the network.  The first nickname specified will be the 'primary'
# nickname, ie. the one that will message users 'out of the blue', all other
# nicknames will by pseudonyms, ie. a user can interact with them just as
# they would the primary nickname, but the nickname will only respond to
# users, not message them out of the blue.
# If you do not specify anything here, channel services will be disabled.
# [DEF] (none)
chanserv = ChanServ

# [OPT] The 'real' name the channel service will have.  This will only
# show up if a user does a /WHOIS on a channel service nickname.
# [DEF] Channel Service
chanserv-name = Channel Service

# [OPT] The nicknames (space separated) that the memo service will sign
# on to the network.  The first nickname specified will be the 'primary'
# nickname, ie. the one that will message users 'out of the blue', all other
# nicknames will by pseudonyms, ie. a user can interact with them just as
# they would the primary nickname, but the nickname will only respond to
# users, not message them out of the blue.
# If you do not specify anything here, memo services will be disabled.
# [DEF] (none)
memoserv = MemoServ

# [OPT] The 'real' name the memo service will have.  This will only
# show up if a user does a /WHOIS on a memo service nickname.
# [DEF] Channel Service
memoserv-name = Memo Service

# [OPT] The nicknames (space separated) that the operator service will sign
# on to the network.  The first nickname specified will be the 'primary'
# nickname, ie. the one that will message users 'out of the blue', all other
# nicknames will by pseudonyms, ie. a user can interact with them just as
# they would the primary nickname, but the nickname will only respond to
# users, not message them out of the blue.
# If you do not specify anything here, operator services will be disabled.
# [DEF] (none)
operserv = OperServ Magick-1

# [OPT] The 'real' name the operator service will have.  This will only
# show up if a user does a /WHOIS on a operator service nickname.
# [DEF] Channel Service
operserv-name = Operator Service

# [OPT] The nicknames (space separated) that the committee service will sign
# on to the network.  The first nickname specified will be the 'primary'
# nickname, ie. the one that will message users 'out of the blue', all other
# nicknames will by pseudonyms, ie. a user can interact with them just as
# they would the primary nickname, but the nickname will only respond to
# users, not message them out of the blue.
# If you do not specify anything here, committee services will be disabled.
# [DEF] (none)
commserv = CommServ

# [OPT] The 'real' name the committee service will have.  This will only
# show up if a user does a /WHOIS on a committee service nickname.
# [DEF] Channel Service
commserv-name = Committee Service

# [OPT] The nicknames (space separated) that other services will sign
# on to the network.  The first nickname specified will be the 'primary'
# nickname, ie. the one that will message users 'out of the blue', all other
# nicknames will by pseudonyms, ie. a user can interact with them just as
# they would the primary nickname, but the nickname will only respond to
# users, not message them out of the blue.
# If you do not specify anything here, other services will be disabled.
# [DEF] (none)
other = GlobalMSG HelpServ DevNull

# [OPT] The 'real' name other services will have.  This will only
# show up if a user does a /WHOIS on other services nickname.
# [DEF] Channel Service
other-name = Magick <--> User

# [OPT] When a service signs off the network (for example during services
# shutdown), this is the quit message it will use.  This can be overridden
# by the OperServ SHUTDOWN command.  If nothing is specified, no quit reason
# will be given.
quit-message = Goodbye cruel world ...

# +---------------------+
# | File System Section |
# +---------------------+
[filesystem]

# [OPT] The directory where user's pictures will be stored, as numbered files
# without file extensions or any other identifying characteristics.
# [DEF] files/pic
picture-dir = files/pic

# [OPT] The maximum amount of disk space the pictures directory may take up on
# disk.  This is still more of a 'guideline', however once it is exceeded, we
# will stop allowing users to upload their pictures.  Setting this to 0 will
# put no limit on the pictures directory usage (except physical disk space).
# [DEF] 0
picture-size = 0

# [OPT] The directory where attachments to memos will be stored, as numbered
# files without file extensions or any other identifying characteristics.
# [DEF] files/memo
attach-dir = files/memo

# [OPT] The maximum amount of disk space the attachments directory may take up
# on disk.  This is still more of a 'guideline', however once it is exceeded,
# we will stop allowing attachments to memos.  Setting this to 0 will put no
# limit on the attachments directory usage (except physical disk space).
# [DEF] 0
attach-size = 0

# [OPT] The directory where public files will be stored, as numbered files
# without file extensions or any other identifying characteristics.
# [DEF] files/memo
public-dir = files/pub

# [OPT] The maximum amount of disk space the public files directory may take
# up on disk.  This is still more of a 'guideline', however once it is exceeded,
# we will stop allowing public files to be uploaded.  Setting this to 0 will
# put no limit on the public files directory usage (except physical disk space).
# [DEF] 0
public-size = 0

# [OPT] The directory where temporary files will be stored, as numbered files
# without file extensions or any other identifying characteristics.  These
# files are transient, and this directory can safely be emptied on restart.
# [DEF] files/memo
temp-dir = files/temp

# [OPT] The maximum amount of disk space the temporary files directory may take
# up on disk.  This is still more of a 'guideline', however once it is exceeded,
# we will stop allowing all file transfers.  Setting this to 0 will put no limit
# on the public files directory usage (except physical disk space).
# [DEF] 0
temp-size = 0

# [OPT] The size of each block we will use in DCC file transfers.  A DCC file
# transfer works by sending a block of data, then waiting for acknowledgement
# of recipt of that data before sending more data.  Increasing this should
# help speed things up, but could potentially break some clients.
# [DEF] 1 kilobyte
blocksize = 1k

# [OPT] How long to wait for a DCC to be established (or alternatively, the
# period in which we can have no activity) before we will abort the DCC.
# [DEF] 2 minutes
timeout = 2n

# [OPT] Minimum speed a DCC must sustain for us to keep it alive.  If the DCC
# speed drops below this, we will abort it.  Setting this to 0 disables the
# minimum speed check.  This value should be in bytes per second.
# [DEV] 0
min-speed = 0

# [OPT] Maximum speed any single DCC may sustain.  If a DCC is transmitting
# faster than this, it will be automatically capped.  Setting this to 0
# disables DCC speed capping.  This value should be in bytes per second.
# [DEF] 0
max-speed = 0

# [OPT] The maximum throughput all DCCs combined may consume.  If we are over
# this value, we will start capping all DCCs (or lowering existing caps) to
# ensure that we at or around this number.  Setting this to 0 will disable
# global speed limiting.  This value should be in bytes per second.
# [DEF] 0
global-max-speed = 0

# [OPT] How long should our 'current' speed calculations consider relevent.
# In order for us to be able to both report, and limit based on the current
# speed of a DCC file transfer, we must average out how much data was
# transferred in a specific period of time, which should be a relatively short
# period of time.
# [DEF] 30 seconds
sample-time = 30s

# [OPT] Sometimes we have a large amount of data to be sent to the IRC server.
# (or indeed, anyone else we 'talk' to).  To avoid eating up all the memory on
# the system, we will overflow to a disk-based storage mechanism when we go
# above a certain threshold of pending outbound traffic.  This is the directory
# where these overflow files are stored.
# [DEF] flack
flack-dir = flack

# [OPT] The amount of memory we will allocate (per direct connection) as our
# memory-based output buffer.  If we have more than this amount of traffic at
# any time to go to any single socket, we will overflow to disk.
# [DEF] 64 kilobytes
flack-memory = 65536

# [OPT] The size each 'flack' file (that represents data that is pending on a
# single socket) can be before a new flack file for that socket is created.
# We will automatically remove a file once all data contained in it has been
# sent through the socket, or all files once the socket closes.
# [DEF] 1 megabyte
flack-file-max = 1048576

# +-----------------+
# | General Section |
# +-----------------+
#
# This sections is where stuff that fits into no other category goes.  It
# things such as how often events will fire, etc.
[general]

# [OPT] How long to wait after our uplink is disconnected before attempting
# to connect to a new uplink (which may well be the same one).
# [DEF] 5 seconds
server-relink = 5s

# [OPT] How long after a server has split off the network do we remember
# information about its users and such.  'SQUIT protection' is designed to
# help ride out small splits or re-routes, so users who existed before the
# split don't have to re-identify, and we don't sent a massive flurry of
# channel modes.  Once this time expires, if the server has not linked back
# again we forget about all users on the other side of the split.
# [DEF] 2 minutes
squit-protect = 2n

# [OPT] Magick can try to get an early-warning signal of an impending SQUIT
# from user's signoff messages.  This defines how long to remember a user
# that has triggered such an 'early warning' system without a SQUIT coming.
# This stops users faking us out by crafting their signoff message.
# [DEF] 10 seconds
squit-cancel = 10s

# [OPT] How often should we send PING messages to the network to determine
# the current amount of network-wide lag.  Although technically we only need
# to send out a ping when we have had no data from the server recently, we
# will actually send out pings whether we need them or not for lag monitoring.
# [DEF] 30 seconds
ping-frequency = 30s

# [OPT] How many non-wildcard characters must exist in a mask for it to be
# accepted in a channel akick, an akill or services permanent ignore.  If
# this is set to 4, then *!*@*.com would fail, but *!*@*.com.au would not.
# [DEF] 4
starthresh = 4

# [OPT] Default maximum size of any list (users, channels, etc).
# [DEF] 50
list-size = 50

# [OPT] Maximum size a user may request to see of any list.  This does not
# affect IRC operators, who can specify any maximum size (its their dime!).
# [DEF] 250
max-list-size = 250

# [OPT] Minimum number of 'worker' threads we may have.  Worker threads are the
# backbone of Magick.  The worker threads handle all messages from the IRC
# server, from server-based messages (informaiton about joins, parts, etc) to
# all commands to services.  This should be more than one so that one time-
# consuming task does not make services become unresponsive.
# [DEF] 2
min-threads = 3

# [OPT] You can have too much of a good thing, too many threads means that we
# start into the world of lock contention and other such things.  This is the
# maximum amount of worker threads we are allowed to have, regadless of the
# amount of messages waiting to be processed.
# [DEF] 10
max-threads = 25

# [OPT] This is used to determine when we have more threads than are necessary
# for the current workload.  Ideally, we want to have as few threads running as
# we can get away with without affecting services responsiveness.  To this end
# the amount of worker threads at any given time is dynamic, controlled by the
# amount of messages awaiting processing.  The low water mark determines when
# a thread should be terminated using the condition:
#   if (pending_messages < ((threads - 2) * high-water-mark) + low-water-mark)
#     terminate_thread();
# This calculation means that a thread will stay around a little longer than
# is strictly necessary to ensure we are not always spawning/killing threads
# when close to a 'boarder' situation.
# [DEF] 50
low-water-mark = 50

# [OPT] As with the low water mark, the high water mark is used to increase
# the number of worker threads as the load on services goes up.  The condition
# for this is:
#   if (pending_message >= threads * high-water-mark)
#     create_thread();
# [DEF] 75
high-water-mark = 75

# [OPT] How long will we wait for a messages dependancies to be satisfied before
# we allow the message to be processed regardless.  Ideally, this should not be
# necessary, however IRC servers arent perfect.
# [DEF] 30 seconds
message-expire = 30s

# [OPT] How often should we check to see if any expiring entity (nicknames,
# channels, akicks, akills, etc) has expired.  This does not affect internal
# system timers (for example the services ignore), but more entries that have
# a specific creation time and pre-set expiration time.
# [DEF] 5 minutes
expire-check = 5n

# [OPT] How often should our the watchdog thread check for a deadlock.  In any
# multi-threaded program, deadlocks are always possible and undesirable.  One
# way to help 'recover' from them is to implement a watchdog.  The watchdog's
# job is to periodically ensure everything is OK and raise the alarm if it is
# not.  Magick's watchdog does this by requiring all other threads (workers,
# events, you name it) to check in periodically to verify they're still alive.
# [DEF] 5 minutes
watchdog-check = 5n

# [OPT] If a thread has not checked in within the last dead time, then the
# watchdog will consider that thread dead (usually meaning there is some kind
# of deadlock, or could even be the thread has unexpectedly dissapeared).  In
# this case the watchdog will take action.  This could be anything as simple as
# creating a new thread to perform the old one's task, to shutting down Magick
# entirely rather than allowing it to continue in a degraded state.
# [DEF] 30 seconds
watchdog-dead = 30s

# +------------------+
# | NickServ Section |
# +------------------+
[nickserv]

# [OPT] When a user fails to identify to a registered nickname (and is not on
# the access list or the nickname is secure), the user will be renamed if the
# IRC protocol supports it.  If it does, this determines what method will be
# used to rename the user.  If it is set to true, we will attempt to append
# one of the suffixes in the 'suffixes' parameter below.  If it is false,
# we will rename them to the prefix below followed by a number (usually a
# five digit number if the IRC daemon allows).
# [DEF] true
append = false

# [OPT] The suffixes to append to a nickname when renaming them (this option
# is ignored if append is false).  The way these suffixes are applied is to
# go through each suffix and try to apply one, then two, then three, etc. of
# that suffix until we find a nickname that is not registered or in use.
# So if we were renaming 'PreZ', we would try 'PreZ_', then 'PreZ__', then
# 'PreZ___' and so on, and if we reached the nickname size limit, we would
# then try 'PreZ-' then 'PreZ--' then PreZ---' and so on (assuming the
# default value for suffixes).
# [DEF] _-^`
suffixes = _-^`

# [OPT] The prefix we will use when renaming a user who has failed to identify.
# A number (usually 5 digits) is appended to this prefix, so assuming the
# default prefix, a user might be renamed to 'Guest90210'.  This option is
# ignored if append is true.
# [DEF] Guest
prefix = Guest

# [OPT] How long will we wait to expire a nickname that is no longer being
# used.  The nickname expiration time is based off the last time that nickname
# was seen online.  This does not require the user to identify (unless they
# are secure), just sign on from a host on the access list.  Each nickname
# has its own individual expiration time, even when linked together (ie.
# signing on to one nickname does not stop your linked nicknames expiring).
# [DEF] 4 weeks
expire = 4w

# [OPT] Maximum number of nicknames that are allowed to be linked together.
# Once a user has exceeded this amount they will have to drop one of their
# exiting nicknames or register it as a separate entity.  Setting this to
# 0 will disable linked nickname restrictions.
# [DEF] 10
max-links = 10

# [OPT] Committees whose members are exempt from the limit on how many
# nicknames they may have linked together.  You may specify as many of these
# as you like (each on its own line).
# [DEF] (none)
#ovr-max-links = 

# [OPT] How long must a user wait between registering two nicknames.  This
# is designed to stop bots signing on and mass-registering nicknames in an
# attempt to flood services or fill the database with garbage.
# [DEF] 30 seconds
delay = 30s

# [OPT] How long does a user have to identify themselves if their nickname is
# secure, or they are signed on from a host that is not on their access list.
# [DEF] 2 minutes
ident = 2n

# [OPT] How long will the nickname stay signed onto a nickname after the
# RECOVER command has been issued.  A user can sign off the service early by
# issuing the GHOST command.
# [DEF] 1 minute
release = 1n

# [OPT] How long a 'drop token' is active for.  When a user tries to drop
# their nickname, services generates a drop token, and asks the user to
# re-issue the drop command with the token that was generated.  This is
# more or less an 'Are you sure?' mechanism to stop people accidentally
# dropping their nicknames.  This is how long the user will have to
# re-issue the drop command with the token before it will be considered
# out of date, and he user will have to start again.
# [DEF] 1 minute
drop =  1n

# [OPT] How long should the drop token be, in characters.  This should not
# be too long, as it may lead to a higher risk of errors in typing out the
# token.  It should also not be too short so as to hamper the randomness
# of the tokens.
# [DEF] 8
drop-length = 8

# [OPT] How many times may a user fail to identify before we will kill them
# off the network (the assumption being that someone is trying to use some
# kind of dictionary hack on a nickname password).
# [DEF] 5
password-fail = 5

# [OPT] Maximum size a user's picture may be.  If a user attempts to upload
# a bigger file it will be rejected or aborted.  Setting this to 0 puts no
# limit on the size of user's pictures.
# [DEF] 0
picture-maxsize = 0

# [OPT] Valid extensions that may be used when uploading a picture.  If the
# file being uploaded does not have one of these extenisons, it will be
# rejected.  Setting this to nothing will disable user's picture uploading.
# [DEF] jpg png gif bmp tif
picture-extensions = jpg png gif bmp tif

# +-----------------------------------+
# | Default NickServ Settings Section |
# +-----------------------------------+
#
# Any nickname that does not explicitly change their settings will have the
# following settings.
[nickserv.defaults]

# [OPT] Enable Kill Protection, which will force a kill or rename of any user
# who tries to use a registered nickname without identifying (if secure) or
# being on the access list.
# [DEF] true
protect = true

# [OPT] Require any user to identify before being recognized as a rightful
# user of this nickname (renders the user access list useless).
# [DEF] false
secure = false

# [OPT] Do not allow this nickname to expire.  Normally this option may only
# be set on a nickname by a member of the SOP committee.
# [DEF] false
noexpire = false

# [OPT] By default, do not allow anyone to send memos to the user.  This will
# turn the 'memo ignore' list into a 'memo allow' list, meaning that with
# this option turned on, only users in the 'memo allow' list will be able to
# send memos to the user.
# [DEF] false
nomemo = false

# [OPT] Hide information about the last time the user was signed on, the
# options that the user has set on their account, etc.
# [DEF] false
private = false

# [OPT] Prefer that services will use PRIVMSG (aka. /MSG) instead of NOTICE
# (aka. /NOTICE) when communicating to the user.
# [DEF] false
privmsg = false

# [OPT] Use this locale for communications from services to the user.
# [DEF] en_GB
language = en_GB

# +---------------------------------+
# | NickServ Settings Locks Section |
# +---------------------------------+
#
# This section defines which options are globally locked.  The entries in this
# section should all be true/false values that just mean the value is globally
# locked or not.  The actual value it is locked to is the value in the previos
# section (Defalut NickServ Settings, nickserv.defaults).  A global lock can
# not be overridden runtime and affects ALL users.  All locks default are
# optional and default to false.
[nickserv.lock]

protect = false
secure = false
noexpire = false
nomemo = false
private = false
privmsg = false
language = false

# +------------------+
# | ChanServ Section |
# +------------------+
[chanserv]

# [OPT] Should the ChanServ users set +i (regardless of whether the other
# services users are doing so or not).  This is something you would usually
# want to turn on when ChanServ is allowed to join channels.  If this is off
# then a /WHOIS of the ChanServ user is potentially huge.
hide = false

# [OPT] How long will we wait to expire a channel that is no longer being
# used.  The channel expiration time is based off the last time that a
# user on the access list was in the channel.  This does not have to be
# the founder, nor does it require anyone to identify as the channel founder.
# [DEF] 2 weeks
expire = 2w

# [OPT] How long a 'drop token' is active for.  When a user tries to drop
# their channel, services generates a drop token, and asks the user to
# re-issue the drop command with the token that was generated.  This is
# more or less an 'Are you sure?' mechanism to stop people accidentally
# dropping channels.  This is how long the user will have to re-issue the
# drop command with the token before it will be considered out of date,
# and he user will have to start again.
# [DEF] 1 minute
drop =  1n

# [OPT] How long should the drop token be, in characters.  This should not
# be too long, as it may lead to a higher risk of errors in typing out the
# token.  It should also not be too short so as to hamper the randomness
# of the tokens.
# [DEF] 8
drop-length = 8

# [OPT] How long must a user wait between registering two channels.  This
# is designed to stop bots signing on and mass-registering channels in an
# attempt to flood services or fill the database with garbage.
# [DEF] 30 seconds
delay = 30s

# [OPT] The maximum amount of channels a single user is allowed to be the
# founder of.
# [DEF] 15
max-per-nick = 15

# [OPT] Committees whose members are exempt from the limit on how many
# nicknames they may have linked together.  You may specify as many of
# these as you like (each on its own line).
# [DEF] (none)
#ovr-per-nick =

# [OPT] The maximum number of on-join messages a channel may have.  This is
# to stop channels more or less flooding users when they join.
# [DEF] 15
max-messages = 15

# [OPT] Committees whose members are able to add more on-join messages to a
# channel, even if it has exceeded its maximum allowable messages limit.
# You may specify as many of these as you like (each on its own line).
# [DEF] (none)
#ovr-messages =

# [OPT] How many times may a user fail to identify before we will kill them
# off the network (the assumption being that someone is trying to use some
# kind of dictionary hack on a channel password).
# [DEF] 5
password-fail = 5

# [OPT] How long should ChanServ stay inside a channel after it has kicked
# out the last user in the channel (for example the channel is restricted,
# or was empty and a user on the akick list joined, etc).  This is done to
# maintain the ban on the user (if set) and stop the user auto-rejoining.
# [DEF] 15 seconds
channel-keep = 15s

# [OPT] The minimum access level that may be set in a channel.  This should
# be a negative number.  Any user who has a negative access will be treated
# worse than a user who is not on the access list.  A user with a negative
# access level will only have their access checked against negative levels
# (such as AUTODEOP which defaults to -1).
# [DEF] -1
min-level = -1

# [OPT] The maximum access level that may be set in a channel.  Actually,
# this is the maximum level a user may be added to the access list at,
# as the founder is always considered to have an access level of this
# number + 1.  Similarly, when we set a level to FOUNDER we are setting it
# to this number + 1, and to DISABLED we are setting it to this number + 2.
# [DEF] 30
max-level = 30

# +-----------------------------------+
# | Default ChanServ Settings Section |
# +-----------------------------------+
#
# Any channel that does not explicitly change their settings will have the
# following settings.
[chanserv.defaults]

# [OPT] Default mode lock.  The mode lock is a mode specification that will
# be enforced on the channel.  So if a + mode is specified, that mode will
# be reset if someone tries to remove that mode from channel.  If a - mode
# is specified, the mode will always be removed if someone tries to set it.
# Modes that affect users (eg. +o and +v) or the ban list (eg. +b and +e)
# cannot be specified in an mlock specification.
# [DEF] +nt
mlock = +nt

# [OPT] How long should ChanServ allow user-set bans to exist on channel
# before automatically removing them.  This is a feature to stop the ban
# list filling up (which is can) because of people setting bans and then
# never removing them again (which happens quite often, especially in
# busy channels).  When set to 0, bans will not be removed by ChanServ.
# [DEF] 0
bantime = 0

# [OPT] How long does ChanServ remember each part form a channel.  The
# main purpose of this is to suppress the channel greeting for a user
# if they have parted within the time specified here.  It stops people
# parting and joining channel just so people can see their greeting.
# More importantly, it stops them repeatedly parting and joining and
# causing ChanServ to flood the channel with their greeting.
# [DEF] 3 minutes
parttime = 3n

# [OPT] Remember the topics that are set on the channel, and re-set it
# the topic to the last topic when the channel is created (ie. upon
# the first join).
# [DEF] true
keeptopic = true

# [OPT] Lock the topic, so that the only way to change it is with the
# ChanServ TOPIC command (any other attempt to change the topic will
# result in ChanServ changing it back).
# [DEF] false
topiclock = false

# [OPT] Make this channel private, hiding information such as the
# current channel statistics (number of current users, opQs, etc) or
# when it was last in use, and the settings for the channel options.
# [DEF] false
private = false

# [OPT] Require a user to have appropriate access on the access list
# before allowing them to be an op/half op/voice.  If a user is oped
# that does not have appropriate privileges (ie. access to the op
# command or auto-ops) they will be deoped automatically.
# [DEF] false
secureops = false

# [OPT] Require a user to identify to their own nickname (or the channel)
# to receive any access in this channel.
# [DEF] false
secure = false

# [OPT] Do not allow this channel to expire.  Normally this option may
# only be set on a nickname by a member of the SOP committee.
# [DEF] false
noexpire = false

# [OPT] Do not reverse ops for users who do not have sufficient access
# when set by the server.  By default, Magick will remove any ops set
# by the server for any user who does not have ops access.  This is a
# protection to stop people abusing a netsplit to gain ops (called
# 'riding the split').  This also reduces the incentive for abusive
# users to DOS a server to create a split they can ride to gain ops.
# [DEF] false
anarchy = false

# [OPT] Automatically kick users when they are banned.
# [DEF] false
kickonban = false

# [OPT] Automatically kick and ban users who are not on the access with
# a positive number.  This more or less means everyone who is not on the
# access list is akicked, and allows the maximum control of who may or
# may not enter the channel without relying on a key, user limit, or
# channel key, all of which can be circumvented by anyone with ops.
# [DEF] false
restricted = false

# [OPT] The primary ChanServ nickname should join the channel.  This is
# more or less a cosmetic feature, though one that some people like.  This
# option must be enabled however for any scripts that respond to in-channel
# commands (eg. a user typing '`op' in the public channel) to work.
# [DEF] false
cjoin = false

# [OPT] Revenge action that should be taken when a user deops, kicks or bans
# a user that is higher than them on the access list.  The available options
# are:
#   - NONE (no action at all is taken)
#   - REVERSE (no revenge taken, but the offending action is reversed)
#   - MIRROR (the same action is taken against the offender)
#   - DEOP (the offender is deoped)
#   - KICK (the offender is kicked)
#   - BAN1 (the user is banned with the mask Nick!*@*)
#   - BAN2 (the user is banned with the mask *!user@port.host)
#   - BAN3 (the user is banned with the mask *!user@*.host)
#   - BAN4 (the user is banned with the mask *!*@port.host)
#   - BAN5 (the user is banned with the mask *!*@*.host)
# [DEF] NONE
revenge = NONE

# +---------------------------------+
# | ChanServ Settings Locks Section |
# +---------------------------------+
#
# This section defines which options are globally locked.  The entries in this
# section (with the exception of mlock) should all be true/false values that
# just mean the value is globally locked or not.  The actual value it is locked
# to is the value in the previos section (Defalut ChanServ Settings,
# chanserv.defaults).  A global lock can not be overridden runtime and affects
# ALL channels.  All locks are optional and default to false.
[chanserv.lock]

# [OPT] The modes to lock on/off.  This is in the same format as the default
# mode lock setting, however options specified here cannot be removed from the
# mode lock or inverted by a per-channel lock by a SOP and as such are forced
# on every registered channel.
# [DEF] (none)
#mlock = 

bantime = false
parttime = false
keeptopic = false
topiclock = false
private = false
secureops = false
secure = false
noexpire = false
anarchy = false
kickonban = false
restricted = false
cjoin = false
revenge = false

# +---------------------------------+
# | ChanServ Default Levels Section |
# +---------------------------------+
#
# Magick allows you to change what each access level can do by altering what
# access level is required for different ChanServ features.  These are the
# default levels required for various ChanServ features.  All users that are
# not on the access list are considered to have the access level 0.
[chanserv.levels]

# [OPT] Level to automatically deop users.  This should be a negative number to
# work correctly.
# [DEF] -1
autodeop = -1

# [OPT] Level to automatically voice (mode +v) a user.  This level is only used
# if the user is less than autohalfop and autoop.
# [DEF] 5
autovoice = 5

# [OPT] Level to automatically half-op (mode +h) a user.  This will only work if
# it is supported by the IRC server software in use on the network.  This level
# is only used if the user is less than autoop.
# [DEF] 10
autohalfop = 10

# [OPT] Level to automatically op (mode +o) a user.
# [DEF] 10
autoop = 10

# [OPT] Level required to be able to read channel news items.
# [DEF] 0
readmemo = 0

# [OPT] Level required to create a new channel news item, or remove their own
# news item.
# [DEF] 15
writememo = 15

# [OPT] Level required to be able to remove channel news items that they did
# not create themselves.
# [DEF] 25
delmemo = 25

# [OPT] Level required to be able to set a channel greeting.  The user must be
# registered to be able to set a greeting.
# [DEF] 1
greet = 1

# [OPT] Level required to be able to lock someone else's greeting (so that they
# cannot change it themselves).
# [DEF] 25
overgreet = 25

# [OPT] Level required to be able to add/remove channel on-join messages.
# [DEF] 20
message = 20

# [OPT] Level required to be able to add/remove someone on the autokick list.
# [DEF] 20
autokick = 20

# [OPT] Access level required to execute commands normally executed on ones
# self (op, voice, unban, invite, etc) on other users.
# [DEF] 25
super = 25

# [OPT] Level required for services to automatically remove any bans set by
# a server (ie. when a split server is re-joining the network).
# [DEF] 10
unban = 10

# [OPT] Level required to be able to add/remove users on the access list.  A
# user can only manipulate users who are lower than themselves on the access
# list (everyone is considered lower than the founder).
# [DEF] 5
access = 5

# [OPT] Level required to be able to alter most of the channel settings (both
# the options (topic lock, etc) and informational settings (web site, etc).
# [DEF] 25
set = 25

# [OPT] Level required to view information about the channel such as the current
# modes, the current users inside the channel, etc.  This can be used to discover
# the current channel key for +k channels.
# [DEF] 1
view = 1

# [OPT] Level require for a user to invite themselves to the channel.
# [DEF] 5
cmd-invite = 5

# [OPT] Level required for a user to be able to unban themselves from the channel.
# [DEF] 10
cmd-unban = 10

# [OPT] Level required for a user to voice (or de-voice) themselves.
# [DEF] 5
cmd-voice = 5

# [OPT] Level required for a user to half op (or de-half op) themselves.  This
# requires half ops to be supported by the IRC server software in use.
# [DEF] 10
cmd-halfop = 10

# [OPT] Level required for a user to op (or deop) themselves.
# [DEF] 10
cmd-op = 10

# [OPT] Level required for a user to be able to kick another user using ChanServ.
# [DEF] 15
cmd-kick = 15

# [OPT] Level required for a user to use ChanServ to set a channel mode (except
# user-based modes (eg. +o and +v) or modes that go against the mode lock).
# [DEF] 15
cmd-mode = 15

# [OPT] Level required to use the CLEAR command which can remove anything from
# ops and modes to even all users en-masse.
# [DEF] 20
cmd-clear = 20

# +------------------+
# | ChanServ Section |
# +------------------+
[memoserv]

# [OPT] How long will we wait to expire a channel news item.  This is a fixed
# time for every news item, to ensure that they do not last forever.
# [DEF] 3 weeks
news-expire = 3w

# [OPT] How long should we keep a new memo (including a news item) 'in flight'.
# While memos are 'in flight' they can be cancelled, appended to, modified,
# or redirected.  Every action (except cancellation, obviously) will start
# the in flight time again.  Once the in flight time has expired (or an explicit
# FLUSH command has been issued) the memo will be sent.  Similarly, a memo
# will automatically be sent when the sending user signs off.
# [DEF] 2 minutes
inflight = 2n

# [OPT] How long must a user wait between creating new memos to be sent.  This
# is designed to stop people memo flooding.  Setting this to 0 will erradicate
# any delay between sending memos.
delay = 10s

# [OPT] Maximum number of memos a single user (being a group of linked nicknames)
# may have.  Once the user has at least this many memos, anyone trying to send
# more memos to this user will receive a 'memo box full' message.  Setting this
# to 0 will mean no limit.
# [DEF] 0
memos = 50

# [OPT] Maximum number of news items a channel may have.  Just as with the memo
# limit, once this limit is reached, no new news items may be created until
# older ones expire or are erased.  Setting this to 0 will mean no limit.
# [DEF] 0
news = 50

# [OPT] Committees whose members both do not have a limit on the number of
# memos they may have, but are also able to send memos to other users even if
# they are at or over their memo limit.  You may specify as many of these as
# you like (each on its own line).
# [DEF] (none)
#ovr-memos = 

# [OPT] Will we allow users to include attachments with the memos they send
# to other users.  By default, no checking is done on any files that are sent
# between users (however things such as virus scans, etc. may be added via.
# scripts), and since the files are stored anonymously on the disk (ie. as
# numbered files) there is no way by looking at a directory listing what is
# being stored or who each files belongs to.
# [DEF] true
attachments = true

# [OPT] Maximum size of any memo attachment.  Files above this size will be
# automatically rejected.  Setting this to 0 will mean there is no limit to
# the size of memo attachments.
# [DEF] 0
max-file-size = 0

# +------------------+
# | OperServ Section |
# +------------------+
[operserv]

# [REQ] The users who will have ultimate control over the network.  All other
# committees derive from the SADMIN committee, and users listed here are the
# only members of that committee.  If the user is not registered on startup,
# the databases will need to be reloaded to make the user a SADMIN.  You may
# specify as many of these entries as you like (one per line).
services-admin = PreZ
services-admin = Lilith

# [OPT] Do we require users to be identified to be able to use any of
# OperServ's commands.  This goes above and beyond the secure setting for
# individual committees (since commands are usually assigned to committees).
# [DEF] false
secure = false

# [OPT] Require a user to be recognized as on the OPER committee for them to
# be able to set mode +o (ie. become an IRC Operatror).  If this is true, then
# any attempt by someone who is NOT on the OPER committee to become an IRC
# operator will be reversed automatically.
# [DEF] false
secure-oper = false

# [OPT] The initial measurement time frame we will use for High Traffic Mode.
# When the average bandwidth over this time is greater than the HTM threshold
# we will switch into HTM mode.  Once in HTM mode, the 'gap' or measurement
# time frame will continually increase by 2 seconds, and we will remain in high
# traffic mode until the average bandwidth over the current gap falls below
# the traffic threshold.
# [DEF] 5 seconds
htm-gap = 5s

# [OPT] The average bandwidth threshold (per second) that will trigger us going
# into High Traffic Mode (see above).
# [DEF] 16 kilobytes
htm-threshold = 16k

# [OPT] The maximum size the HTM gap can get before we will consider ourselves
# beyond the point of no return and simply disconnect from the network.  If
# this happens often, it is an indication we should either find out and fix why
# so much IRC traffic is being transferred, or increase the HTM threshold.
# [DEF] 1 minute
max-htm-gap = 1n

# [OPT] The initial HTM gap size when High Traffic Mode is turned on manually.
# For all intents and purposes, this is the minimum amount of time we will
# stay in High Traffic Mode once we manually enable it, since normal HTM rules
# (ie. the increasing gap sizes and threshold checking) will occur to determine
# if we will stay in High Traffic Mode.
# [DEF] 30 seconds
manual-gap = 30s

# +---------------------------+
# | OperServ AutoKill Section |
# +---------------------------+
[operserv.akill]

reject = 10.00
expire = 3h
expire-oper = 1d
expire-admin = 1w
expire-sop = 8w
expire-sadmin = 1y

[operserv.clone]
limit = 2
max-limit = 50
kill-reason = Maximum connections from one host exceeded
expire = 3h
akill-trigger = 10
akill-reason = Clone trigger exceeded, Automatic AKILL
akill-time = 30n

[operserv.ignore]
flood-time = 10s
flood-messages = 5
expire = 20s
limit = 5
remove = 5n
method = nick!user@port.host

[commserv]
max-logon = 5
#ovr-logon =

[commserv.defaults]
secure = false
private = false
openmemos = true

[commserv.lock]
secure = false
private = false
openmemos = false

[commserv.all]
name = ALL
#set-mode =

[commserv.regd]
name = REGD
set-mode = r

[commserv.sadmin]
name = SADMIN
mode-o = true
#set-mode = 

[commserv.sop]
name = SOP
mode-o = true
set-mode = a

[commserv.admin]
name = ADMIN
mode-o = true
set-mode = A

[commserv.oper]
name = OPER
mode-o = true
#set-mode = 

[commserv.overrides]
view = OPER
owner = SADMIN

mode = SOP
op = SOP
halfop = ADMIN
voice = OPER
invite = SOP
kick = SOP
unban = SOP
clear = SADMIN

# END FILE
