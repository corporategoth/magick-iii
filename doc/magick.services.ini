# Magick IRC Services
#
# (c) 2005 The Neuromancy Society <info@neuromancy.net>
#
# The above copywright may not be removed under any circumstances,
# however it may be added to if any modifications are made to this
# file.  All modified code must be clearly documented and labelled.
#
# This code is released under the GNU General Public License v2.0 or better.
# The full text of this license should be contained in a file called
# COPYING distributed with this code.  If this file does not exist,
# it may be viewed here: http://www.neuromancy.net/license/gpl.html
#
# =======================================================================
# $Id$
# =======================================================================
#
# For official changes (by The Neuromancy Society), please
# check the ChangeLog* files that come with this distribution.
#
# Third Party Changes (please include e-mail address):
#
# N/A
#
# =======================================================================

# Services configuration file.
#
# Please be aware of the following syntactical rules in this file.
#
# This file is divided into sections.  A key/value pair in one section has
# no baring on the same key/value pair in another section.  Subsections
# are delimited by the '.' character.  For the most part, subsections are
# not needed if the 'parent' section is not needed.  Unlike a traditional
# INI file, some keys in this file are permitted to appear multiple times
# in the same section.
#
# Each comment before a field in this file is prefixed by a code indicatng
# whether the field is required or not.  A code of '[REQ]' indicates that
# the field is required if the section it is in is required.  A code of
# '[OPT]' indicates the field may be omitted if you just wish the default
# to be taken.  Any optional value will also include a '[DEF]' code that
# will indicate the default value if the field is omitted.
#
# When specifying a value that is to be interpereted as a duration, you
# may either spell out the full words (minutes, seconds, etc) or you may
# use the following abbreviations to represent the equivalent units:
#   y = years    m = months     w = weeks      d = day
#   h = hours    n = minutes    s = seconds
# The seconds value may also be specified as a fractional number.  Also,
# you may specify a higher value than the 'natural' boundary of any unit,
# for example its perfectly valid to say 120 seconds to mean 2 minutes.
# A unit of seconds is assumed if no time unit is specified.
#
# Similarly, when specifying values indicating a size (such as kilobytes),
# you may use the following abbreviations to represent the equivalent units:
#   e = exabytes     p = petabytes    t = terabytes    g = gigabytes
#   m = megabytes    k = kilobytes    b = bytes
# As with duration values, going above the 'natural' buondaries of any unit
# is allowed (ie. 2048 bytes to mean 2 kb).  Additionally, you may suffix any
# unit abbreviation (except bytes) with 'b' without altering its meaning, so
# 5kb is equivalent to just 5k.  A unit of bytes is assumed if no size unit is
# specified.
# 
# Use of the '#' character will make any line a comment from that point on,
# and as such the '#' character may not be used in any field.  To represent
# a channel, the '&' channel may be used to replace the '#' character.  We
# only support channels prefixed with a '&' (representing a '#') or a '+'.
#
# Any field requiring a path (either a directory OR file) may have that path
# specified in either absolute or relative terms.  If a relative path is 
# given, it will be relative to the working working directory of Magick,
# unless otherwise specified.  The working directory of Magick will always
# be the current directory where Magick was started from unless the --dir
# (-D) command line option is used.

# +------------------+
# | NickServ Section |
# +------------------+
[nickserv]

# [OPT] When a user fails to identify to a registered nickname (and is not on
# the access list or the nickname is secure), the user will be renamed if the
# IRC protocol supports it.  If it does, this determines what method will be
# used to rename the user.  If it is set to true, we will attempt to append
# one of the suffixes in the 'suffixes' parameter below.  If it is false,
# we will rename them to the prefix below followed by a number (usually a
# five digit number if the IRC daemon allows).
# [DEF] true
append = false

# [OPT] The suffixes to append to a nickname when renaming them (this option
# is ignored if append is false).  The way these suffixes are applied is to
# go through each suffix and try to apply one, then two, then three, etc. of
# that suffix until we find a nickname that is not registered or in use.
# So if we were renaming 'PreZ', we would try 'PreZ_', then 'PreZ__', then
# 'PreZ___' and so on, and if we reached the nickname size limit, we would
# then try 'PreZ-' then 'PreZ--' then PreZ---' and so on (assuming the
# default value for suffixes).
# [DEF] _-^`
suffixes = _-^`

# [OPT] The prefix we will use when renaming a user who has failed to identify.
# A number (usually 5 digits) is appended to this prefix, so assuming the
# default prefix, a user might be renamed to 'Guest90210'.  This option is
# ignored if append is true.
# [DEF] Guest
prefix = Guest

# [OPT] How long will we wait to expire a nickname that is no longer being
# used.  The nickname expiration time is based off the last time that nickname
# was seen online.  This does not require the user to identify (unless they
# are secure), just sign on from a host on the access list.  Each nickname
# has its own individual expiration time, even when linked together (ie.
# signing on to one nickname does not stop your linked nicknames expiring).
# [DEF] 4 weeks
expire = 4w

# [OPT] Maximum number of nicknames that are allowed to be linked together.
# Once a user has exceeded this amount they will have to drop one of their
# exiting nicknames or register it as a separate entity.  Setting this to
# 0 will disable linked nickname restrictions.
# [DEF] 10
max-links = 10

# [OPT] Committees whose members are exempt from the limit on how many
# nicknames they may have linked together.  You may specify as many of these
# as you like (each on its own line).
# [DEF] (none)
#ovr-max-links = 

# [OPT] How long must a user wait between registering two nicknames.  This
# is designed to stop bots signing on and mass-registering nicknames in an
# attempt to flood services or fill the database with garbage.
# [DEF] 30 seconds
delay = 30s

# [OPT] How long does a user have to identify themselves if their nickname is
# secure, or they are signed on from a host that is not on their access list.
# [DEF] 2 minutes
ident = 2n

# [OPT] How long will the nickname stay signed onto a nickname after the
# RECOVER command has been issued.  A user can sign off the service early by
# issuing the GHOST command.
# [DEF] 1 minute
release = 1n

# [OPT] How long a 'drop token' is active for.  When a user tries to drop
# their nickname, services generates a drop token, and asks the user to
# re-issue the drop command with the token that was generated.  This is
# more or less an 'Are you sure?' mechanism to stop people accidentally
# dropping their nicknames.  This is how long the user will have to
# re-issue the drop command with the token before it will be considered
# out of date, and he user will have to start again.
# [DEF] 1 minute
drop =  1n

# [OPT] How long should the drop token be, in characters.  This should not
# be too long, as it may lead to a higher risk of errors in typing out the
# token.  It should also not be too short so as to hamper the randomness
# of the tokens.
# [DEF] 8
drop-length = 8

# [OPT] How many times may a user fail to identify before we will kill them
# off the network (the assumption being that someone is trying to use some
# kind of dictionary hack on a nickname password).
# [DEF] 5
password-fail = 5

# [OPT] Maximum size a user's picture may be.  If a user attempts to upload
# a bigger file it will be rejected or aborted.  Setting this to 0 puts no
# limit on the size of user's pictures.
# [DEF] 0
picture-maxsize = 0

# [OPT] Valid extensions that may be used when uploading a picture.  If the
# file being uploaded does not have one of these extenisons, it will be
# rejected.  Setting this to nothing will disable user's picture uploading.
# [DEF] jpg png gif bmp tif
picture-extensions = jpg png gif bmp tif

# +-----------------------------------+
# | Default NickServ Settings Section |
# +-----------------------------------+
#
# Any nickname that does not explicitly change their settings will have the
# following settings.
[nickserv.defaults]

# [OPT] Enable Kill Protection, which will force a kill or rename of any user
# who tries to use a registered nickname without identifying (if secure) or
# being on the access list.
# [DEF] true
protect = true

# [OPT] Require any user to identify before being recognized as a rightful
# user of this nickname (renders the user access list useless).
# [DEF] false
secure = false

# [OPT] Do not allow this nickname to expire.  Normally this option may only
# be set on a nickname by a member of the SOP committee.
# [DEF] false
noexpire = false

# [OPT] By default, do not allow anyone to send memos to the user.  This will
# turn the 'memo ignore' list into a 'memo allow' list, meaning that with
# this option turned on, only users in the 'memo allow' list will be able to
# send memos to the user.
# [DEF] false
nomemo = false

# [OPT] Hide information about the last time the user was signed on, the
# options that the user has set on their account, etc.
# [DEF] false
private = false

# [OPT] Prefer that services will use PRIVMSG (aka. /MSG) instead of NOTICE
# (aka. /NOTICE) when communicating to the user.
# [DEF] false
privmsg = false

# [OPT] Use this locale for communications from services to the user.
# [DEF] en_GB
language = en_GB

# +---------------------------------+
# | NickServ Settings Locks Section |
# +---------------------------------+
#
# This section defines which options are globally locked.  The entries in this
# section should all be true/false values that just mean the value is globally
# locked or not.  The actual value it is locked to is the value in the previous
# section (Defalut NickServ Settings, nickserv.defaults).  A global lock can
# not be overridden runtime and affects ALL users.  All locks default are
# optional and default to false.
[nickserv.lock]

protect = false
secure = false
noexpire = false
nomemo = false
private = false
privmsg = false
language = false

# +------------------+
# | ChanServ Section |
# +------------------+
[chanserv]

# [OPT] Should the ChanServ users set +i (regardless of whether the other
# services users are doing so or not).  This is something you would usually
# want to turn on when ChanServ is allowed to join channels.  If this is off
# then a /WHOIS of the ChanServ user is potentially huge.
hide = false

# [OPT] How long will we wait to expire a channel that is no longer being
# used.  The channel expiration time is based off the last time that a
# user on the access list was in the channel.  This does not have to be
# the founder, nor does it require anyone to identify as the channel founder.
# [DEF] 2 weeks
expire = 2w

# [OPT] How long a 'drop token' is active for.  When a user tries to drop
# their channel, services generates a drop token, and asks the user to
# re-issue the drop command with the token that was generated.  This is
# more or less an 'Are you sure?' mechanism to stop people accidentally
# dropping channels.  This is how long the user will have to re-issue the
# drop command with the token before it will be considered out of date,
# and he user will have to start again.
# [DEF] 1 minute
drop =  1n

# [OPT] How long should the drop token be, in characters.  This should not
# be too long, as it may lead to a higher risk of errors in typing out the
# token.  It should also not be too short so as to hamper the randomness
# of the tokens.
# [DEF] 8
drop-length = 8

# [OPT] How long must a user wait between registering two channels.  This
# is designed to stop bots signing on and mass-registering channels in an
# attempt to flood services or fill the database with garbage.
# [DEF] 30 seconds
delay = 30s

# [OPT] The maximum amount of channels a single user is allowed to be the
# founder of.
# [DEF] 15
max-per-nick = 15

# [OPT] Committees whose members are exempt from the limit on how many
# nicknames they may have linked together.  You may specify as many of
# these as you like (each on its own line).
# [DEF] (none)
#ovr-per-nick =

# [OPT] The maximum number of on-join messages a channel may have.  This is
# to stop channels more or less flooding users when they join.
# [DEF] 15
max-messages = 15

# [OPT] Committees whose members are able to add more on-join messages to a
# channel, even if it has exceeded its maximum allowable messages limit.
# You may specify as many of these as you like (each on its own line).
# [DEF] (none)
#ovr-messages =

# [OPT] How many times may a user fail to identify before we will kill them
# off the network (the assumption being that someone is trying to use some
# kind of dictionary hack on a channel password).
# [DEF] 5
password-fail = 5

# [OPT] How long should ChanServ stay inside a channel after it has kicked
# out the last user in the channel (for example the channel is restricted,
# or was empty and a user on the akick list joined, etc).  This is done to
# maintain the ban on the user (if set) and stop the user auto-rejoining.
# [DEF] 15 seconds
channel-keep = 15s

# [OPT] The minimum access level that may be set in a channel.  This should
# be a negative number.  Any user who has a negative access will be treated
# worse than a user who is not on the access list.  A user with a negative
# access level will only have their access checked against negative levels
# (such as AUTODEOP which defaults to -1).
# [DEF] -1
min-level = -1

# [OPT] The maximum access level that may be set in a channel.  Actually,
# this is the maximum level a user may be added to the access list at,
# as the founder is always considered to have an access level of this
# number + 1.  Similarly, when we set a level to FOUNDER we are setting it
# to this number + 1, and to DISABLED we are setting it to this number + 2.
# [DEF] 30
max-level = 30

# +-----------------------------------+
# | Default ChanServ Settings Section |
# +-----------------------------------+
#
# Any channel that does not explicitly change their settings will have the
# following settings.
[chanserv.defaults]

# [OPT] Default mode lock.  The mode lock is a mode specification that will
# be enforced on the channel.  So if a + mode is specified, that mode will
# be reset if someone tries to remove that mode from channel.  If a - mode
# is specified, the mode will always be removed if someone tries to set it.
# Modes that affect users (eg. +o and +v) or the ban list (eg. +b and +e)
# cannot be specified in an mlock specification.
# [DEF] +nt
mlock = +nt

# [OPT] How long should ChanServ allow user-set bans to exist on channel
# before automatically removing them.  This is a feature to stop the ban
# list filling up (which is can) because of people setting bans and then
# never removing them again (which happens quite often, especially in
# busy channels).  When set to 0, bans will not be removed by ChanServ.
# [DEF] 0
bantime = 0

# [OPT] How long does ChanServ remember each part form a channel.  The
# main purpose of this is to suppress the channel greeting for a user
# if they have parted within the time specified here.  It stops people
# parting and joining channel just so people can see their greeting.
# More importantly, it stops them repeatedly parting and joining and
# causing ChanServ to flood the channel with their greeting.
# [DEF] 3 minutes
parttime = 3n

# [OPT] Remember the topics that are set on the channel, and re-set it
# the topic to the last topic when the channel is created (ie. upon
# the first join).
# [DEF] true
keeptopic = true

# [OPT] Lock the topic, so that the only way to change it is with the
# ChanServ TOPIC command (any other attempt to change the topic will
# result in ChanServ changing it back).
# [DEF] false
topiclock = false

# [OPT] Make this channel private, hiding information such as the
# current channel statistics (number of current users, opQs, etc) or
# when it was last in use, and the settings for the channel options.
# [DEF] false
private = false

# [OPT] Require a user to have appropriate access on the access list
# before allowing them to be an op/half op/voice.  If a user is oped
# that does not have appropriate privileges (ie. access to the op
# command or auto-ops) they will be deoped automatically.
# [DEF] false
secureops = false

# [OPT] Require a user to identify to their own nickname (or the channel)
# to receive any access in this channel.
# [DEF] false
secure = false

# [OPT] Do not allow this channel to expire.  Normally this option may
# only be set on a nickname by a member of the SOP committee.
# [DEF] false
noexpire = false

# [OPT] Do not reverse ops for users who do not have sufficient access
# when set by the server.  By default, Magick will remove any ops set
# by the server for any user who does not have ops access.  This is a
# protection to stop people abusing a netsplit to gain ops (called
# 'riding the split').  This also reduces the incentive for abusive
# users to DOS a server to create a split they can ride to gain ops.
# [DEF] false
anarchy = false

# [OPT] Automatically kick users when they are banned.
# [DEF] false
kickonban = false

# [OPT] Automatically kick and ban users who are not on the access with
# a positive number.  This more or less means everyone who is not on the
# access list is akicked, and allows the maximum control of who may or
# may not enter the channel without relying on a key, user limit, or
# channel key, all of which can be circumvented by anyone with ops.
# [DEF] false
restricted = false

# [OPT] The primary ChanServ nickname should join the channel.  This is
# more or less a cosmetic feature, though one that some people like.  This
# option must be enabled however for any scripts that respond to in-channel
# commands (eg. a user typing '`op' in the public channel) to work.
# [DEF] false
cjoin = false

# [OPT] Revenge action that should be taken when a user deops, kicks or bans
# a user that is higher than them on the access list.  The available options
# are:
#   - NONE (no action at all is taken)
#   - REVERSE (no revenge taken, but the offending action is reversed)
#   - MIRROR (the same action is taken against the offender)
#   - DEOP (the offender is deoped)
#   - KICK (the offender is kicked)
#   - BAN1 (the user is banned with the mask Nick!*@*)
#   - BAN2 (the user is banned with the mask *!user@port.host)
#   - BAN3 (the user is banned with the mask *!user@*.host)
#   - BAN4 (the user is banned with the mask *!*@port.host)
#   - BAN5 (the user is banned with the mask *!*@*.host)
# [DEF] NONE
revenge = NONE

# +---------------------------------+
# | ChanServ Settings Locks Section |
# +---------------------------------+
#
# This section defines which options are globally locked.  The entries in this
# section (with the exception of mlock) should all be true/false values that
# just mean the value is globally locked or not.  The actual value it is locked
# to is the value in the previous section (Defalut ChanServ Settings,
# chanserv.defaults).  A global lock can not be overridden runtime and affects
# ALL channels.  All locks are optional and default to false.
[chanserv.lock]

# [OPT] The modes to lock on/off.  This is in the same format as the default
# mode lock setting, however options specified here cannot be removed from the
# mode lock or inverted by a per-channel lock by a SOP and as such are forced
# on every registered channel.
# [DEF] (none)
#mlock = 

bantime = false
parttime = false
keeptopic = false
topiclock = false
private = false
secureops = false
secure = false
noexpire = false
anarchy = false
kickonban = false
restricted = false
cjoin = false
revenge = false

# +---------------------------------+
# | ChanServ Default Levels Section |
# +---------------------------------+
#
# Magick allows you to change what each access level can do by altering what
# access level is required for different ChanServ features.  These are the
# default levels required for various ChanServ features.  All users that are
# not on the access list are considered to have the access level 0.
[chanserv.levels]

# [OPT] Level to automatically deop users.  This should be a negative number to
# work correctly.
# [DEF] -1
autodeop = -1

# [OPT] Level to automatically voice (mode +v) a user.  This level is only used
# if the user is less than autohalfop and autoop.
# [DEF] 5
autovoice = 5

# [OPT] Level to automatically half-op (mode +h) a user.  This will only work if
# it is supported by the IRC server software in use on the network.  This level
# is only used if the user is less than autoop.
# [DEF] 10
autohalfop = 10

# [OPT] Level to automatically op (mode +o) a user.
# [DEF] 10
autoop = 10

# [OPT] Level required to be able to read channel news items.
# [DEF] 0
readmemo = 0

# [OPT] Level required to create a new channel news item, or remove their own
# news item.
# [DEF] 15
writememo = 15

# [OPT] Level required to be able to remove channel news items that they did
# not create themselves.
# [DEF] 25
delmemo = 25

# [OPT] Level required to be able to set a channel greeting.  The user must be
# registered to be able to set a greeting.
# [DEF] 1
greet = 1

# [OPT] Level required to be able to lock someone else's greeting (so that they
# cannot change it themselves).
# [DEF] 25
overgreet = 25

# [OPT] Level required to be able to add/remove channel on-join messages.
# [DEF] 20
message = 20

# [OPT] Level required to be able to add/remove someone on the autokick list.
# [DEF] 20
autokick = 20

# [OPT] Access level required to execute commands normally executed on ones
# self (op, voice, unban, invite, etc) on other users.
# [DEF] 25
super = 25

# [OPT] Level required for services to automatically remove any bans set by
# a server (ie. when a split server is re-joining the network).
# [DEF] 10
unban = 10

# [OPT] Level required to be able to add/remove users on the access list.  A
# user can only manipulate users who are lower than themselves on the access
# list (everyone is considered lower than the founder).
# [DEF] 5
access = 5

# [OPT] Level required to be able to alter most of the channel settings (both
# the options (topic lock, etc) and informational settings (web site, etc).
# [DEF] 25
set = 25

# [OPT] Level required to view information about the channel such as the current
# modes, the current users inside the channel, etc.  This can be used to discover
# the current channel key for +k channels.
# [DEF] 1
view = 1

# [OPT] Level require for a user to invite themselves to the channel.
# [DEF] 5
cmd-invite = 5

# [OPT] Level required for a user to be able to unban themselves from the channel.
# [DEF] 10
cmd-unban = 10

# [OPT] Level required for a user to voice (or de-voice) themselves.
# [DEF] 5
cmd-voice = 5

# [OPT] Level required for a user to half op (or de-half op) themselves.  This
# requires half ops to be supported by the IRC server software in use.
# [DEF] 10
cmd-halfop = 10

# [OPT] Level required for a user to op (or deop) themselves.
# [DEF] 10
cmd-op = 10

# [OPT] Level required for a user to be able to kick another user using ChanServ.
# [DEF] 15
cmd-kick = 15

# [OPT] Level required for a user to use ChanServ to set a channel mode (except
# user-based modes (eg. +o and +v) or modes that go against the mode lock).
# [DEF] 15
cmd-mode = 15

# [OPT] Level required to use the CLEAR command which can remove anything from
# ops and modes to even all users en-masse.
# [DEF] 20
cmd-clear = 20

# +------------------+
# | ChanServ Section |
# +------------------+
[memoserv]

# [OPT] How long will we wait to expire a channel news item.  This is a fixed
# time for every news item, to ensure that they do not last forever.
# [DEF] 3 weeks
news-expire = 3w

# [OPT] How long should we keep a new memo (including a news item) 'in flight'.
# While memos are 'in flight' they can be cancelled, appended to, modified,
# or redirected.  Every action (except cancellation, obviously) will start
# the in flight time again.  Once the in flight time has expired (or an explicit
# FLUSH command has been issued) the memo will be sent.  Similarly, a memo
# will automatically be sent when the sending user signs off.
# [DEF] 2 minutes
inflight = 2n

# [OPT] How long must a user wait between creating new memos to be sent.  This
# is designed to stop people memo flooding.  Setting this to 0 will erradicate
# any delay between sending memos.
delay = 10s

# [OPT] Maximum number of memos a single user (being a group of linked nicknames)
# may have.  Once the user has at least this many memos, anyone trying to send
# more memos to this user will receive a 'memo box full' message.  Setting this
# to 0 will mean no limit.
# [DEF] 0
memos = 50

# [OPT] Maximum number of news items a channel may have.  Just as with the memo
# limit, once this limit is reached, no new news items may be created until
# older ones expire or are erased.  Setting this to 0 will mean no limit.
# [DEF] 0
news = 50

# [OPT] Committees whose members both do not have a limit on the number of
# memos they may have, but are also able to send memos to other users even if
# they are at or over their memo limit.  You may specify as many of these as
# you like (each on its own line).
# [DEF] (none)
#ovr-memos = 

# [OPT] Will we allow users to include attachments with the memos they send
# to other users.  By default, no checking is done on any files that are sent
# between users (however things such as virus scans, etc. may be added via.
# scripts), and since the files are stored anonymously on the disk (ie. as
# numbered files) there is no way by looking at a directory listing what is
# being stored or who each files belongs to.
# [DEF] true
attachments = true

# [OPT] Maximum size of any memo attachment.  Files above this size will be
# automatically rejected.  Setting this to 0 will mean there is no limit to
# the size of memo attachments.
# [DEF] 0
max-file-size = 0

# +------------------+
# | OperServ Section |
# +------------------+
[operserv]

# [REQ] The users who will have ultimate control over the network.  All other
# committees derive from the SADMIN committee, and users listed here are the
# only members of that committee.  If the user is not registered on startup,
# the databases will need to be reloaded to make the user a SADMIN.  You may
# specify as many of these entries as you like (one per line).
services-admin = PreZ
services-admin = Lilith

# [OPT] Do we require users to be identified to be able to use any of
# OperServ's commands.  This goes above and beyond the secure setting for
# individual committees (since commands are usually assigned to committees).
# [DEF] false
secure = false

# [OPT] Require a user to be recognized as on the OPER committee for them to
# be able to set mode +o (ie. become an IRC Operatror).  If this is true, then
# any attempt by someone who is NOT on the OPER committee to become an IRC
# operator will be reversed automatically.
# [DEF] false
secure-oper = false

# [OPT] The initial measurement time frame we will use for High Traffic Mode.
# When the average bandwidth over this time is greater than the HTM threshold
# we will switch into HTM mode.  Once in HTM mode, the 'gap' or measurement
# time frame will continually increase by 2 seconds, and we will remain in high
# traffic mode until the average bandwidth over the current gap falls below
# the traffic threshold.
# [DEF] 5 seconds
htm-gap = 5s

# [OPT] The average bandwidth threshold (per second) that will trigger us going
# into High Traffic Mode (see above).
# [DEF] 16 kilobytes
htm-threshold = 16k

# [OPT] The maximum size the HTM gap can get before we will consider ourselves
# beyond the point of no return and simply disconnect from the network.  If
# this happens often, it is an indication we should either find out and fix why
# so much IRC traffic is being transferred, or increase the HTM threshold.
# [DEF] 1 minute
max-htm-gap = 1n

# [OPT] The initial HTM gap size when High Traffic Mode is turned on manually.
# For all intents and purposes, this is the minimum amount of time we will
# stay in High Traffic Mode once we manually enable it, since normal HTM rules
# (ie. the increasing gap sizes and threshold checking) will occur to determine
# if we will stay in High Traffic Mode.
# [DEF] 30 seconds
manual-gap = 30s

# +---------------------------+
# | OperServ AutoKill Section |
# +---------------------------+
[operserv.akill]

# [OPT] What is the maximum percentage of all the network users that an akill
# may match before it is rejected. 
# [DEF] 10.00
reject = 10.00

# [OPT] Defalut expiry time for an akill (if no time is specified).
# [DEF] 3 hours
expire = 3h

# [OPT] Maximum time a member of the OPER committee may set an akill for.
# [DEF] 1 day
expire-oper = 1d

# [OPT] Maximum time a member of the ADMIN committee may set an akill for.
# [DEF] 1 week
expire-admin = 1w

# [OPT] Maximum time a member of the SOP committee may set an akill for.
# [DEF] 2 months
expire-sop = 2m

# [OPT] Maximum time a member of the SADMIN committee may set an akill for.
# [DEF] 1 year
expire-sadmin = 1y

# +-----------------------------------+
# | OperServ Clone Protection Section |
# +-----------------------------------+
[operserv.clone]

# [OPT] Maximum amount of connections from the same user@host allowable on the
# network.  This should usually be set >1 to accomodate for a user timing out
# and reconnecting.  If this is set to 0 we will not check user@host clones.
# [DEF] 2
user-limit = 2

# [OPT] Maximum amount of connections from the same host allowable on the
# network.  This should usually be set >1 to accomodate for a user timing out
# and reconnecting.  If this is set to 0 we will not check host clones.
# [DEF] 3
host-limit = 3

# [OPT] Maximum amount of clones we are allowed to add an override for.
# [DEF] 50
max-limit = 50

# [OPT] The kill reason we will use when killing off users that have exceeded
# the clone limit (be it the default limits or an override).
# [DEF] Maximum connections exceeded
kill-reason = Maximum connections exceeded

# [OPT] How long should we remember previous kills for exceeding the clone
# limit.  This is used to determine when an akill should be set.
# [DEF] 3 hours
expire = 3h

# [OPT] How many times do we have to kill a user for exceeding the clone limit
# before we will set an akill on the appropriate mask for cloning.
# [DEF] 10
akill-trigger = 10

# [OPT] The akill reason used when we have triggered the clone limit enough to
# warrent an akill for cloning.
# [DEF] Clone trigger exceeded, Automatic AKILL
akill-reason = Clone trigger exceeded, Automatic AKILL

# [OPT] How long will we set an akill for when setting an automatic akill for
# cloning.  We do not forget about previous clone triggers once an akill is
# set, however while akilled this time does allow for old triggers to be
# forgotten.
# [DEF] 30 minutes
akill-time = 30n

# +----------------------------------+
# | OperServ Services Ignore Section |
# +----------------------------------+
[operserv.ignore]

# [OPT] Sample time for services flood protection.  Flood protection works by
# measuring how many messages it got within the sample time, too many and it
# will trigger an automatic services ignore.  IRC operators may not trigger
# flood protection.
# [DEF] 10 seconds
flood-time = 10s

# [OPT] Amount of messages in the sample window before flood protection is
# triggered.
# [DEF] 5
flood-messages = 5

# [OPT] How long should services ignore a user once flood protection is
# triggered.  This is only for temporary ignores.
# [DEF] 20 seconds
expire = 20s

# [OPT] How many temporary ignores may a user trigger before we will set a
# permanent ignore on the user.  Once a permanent ignore has been set on a
# user it may only be removed by a SOP.
# [DEF] 5
limit = 5

# [OPT] How long do we remember temporary ignores (for the purposes of applying
# the above limit).  This time should obviously be longer than limit * expire.
# The less time we remember temporary ignores the less likely a persistent
# flooder will be put on permanent ignore.
# [DEF] 15 minutes
remove = 15n

# [OPT] Mask we will use for setting a permanent ignore.  Temporary ignores will
# only ignore the user while they are online, however once the ignore limit has
# been exceeded we need to actually ignore by mask.  The options are:
#   - nick!user@port.host
#   - nick!user@*.host
#   - nick!*@port.host
#   - nick!*@*.host
#   - nick!*@*
#   - *!user@port.host
#   - *!user@*.host
#   - *!*@port.host
#   - *!*@*.host
# [DEF] *!user@port.host
method = *!user@port.host

# +------------------+
# | CommServ Section |
# +------------------+
[commserv]

# [OPT] Maximum number of logon messages a committee may have.
# [DEF] 5
max-logon = 5

# [OPT] Committees that do not have a limit on the number of logon messages
# they may have.  You may specify as many of these as you like (each on its own
# line).
# [DEF] (none)
#ovr-logon =

# +-----------------------------------+
# | Default CommServ Settings Section |
# +-----------------------------------+
#
# Any committee that does not explicitly change its settings will have the
# following settings.
[commserv.defaults]

# [OPT] Require any user to identify before being recognized as a member
# of the committee.
# [DEF] false
secure = false

# [OPT] Hide information about whether a user is a member of a committee,
# options that the committee has set, etc.
# [DEF] false
private = false

# [OPT] Allow all members to send a memo to all other members of the same
# committee (ie. a mass-memo).  If this is set to false, only committee
# heads may send a memo to all members of the committee.
# [DEF] true
openmemos = true

# +---------------------------------+
# | NickServ Settings Locks Section |
# +---------------------------------+
#
# This section defines which options are globally locked.  The entries in this
# section should all be true/false values that just mean the value is globally
# locked or not.  The actual value it is locked to is the value in the previous
# section (Defalut CommServ Settings, commserv.defaults).  A global lock can
# not be overridden runtime and affects ALL committees.  All locks default are
# optional and default to false.
[commserv.lock]

secure = false
private = false
openmemos = false

# +-----------------------+
# | ALL Committee Section |
# +-----------------------+
#
# The 'ALL' committee is a virtual committee where all currently online users
# are members (even if not registered).  It is used to do things like create
# global signon messages and for things such as command or when some kind of
# committee is needed for access definition (eg. for PRIVMSG commands).
#
# The ALL committe ALWAYS has private on and openmemos off.
[commserv.all]

# [REQ] The name of this committee.  This can be anything you like as long
# as it does not have special characters or whitespace in it.
# [DEF] ALL
name = ALL

# [OPT] Modes to set on users when they are recognized as bein in this committe.
# Note these modes will *NOT* be removed again when the user is no longer
# recognized as being in this committee.  This requires the IRC server software
# to support SVSMODE or some equivalent.
# [DEF] (none)
#set-mode =

# +------------------------+
# | REGD Committee Section |
# +------------------------+
#
# The 'REGD' committee is a virtual committee where all currently recognized
# users (ie. they have a registered nickname and are either identified, or 
# are signed on from a host on their access list and they don't have secure
# turned on) are members.  This is mostly used to restrict certain commands
# to registered nicknames only.
#
# The REGD committe ALWAYS has private on and openmemos off.
[commserv.regd]

# [REQ] The name of this committee.  This can be anything you like as long
# as it does not have special characters or whitespace in it.
# [DEF] REGD
name = REGD

# [OPT] Modes to set on users when they are recognized as bein in this committe.
# Note these modes will *NOT* be removed again when the user is no longer
# recognized as being in this committee.  This requires the IRC server software
# to support SVSMODE or some equivalent.
# [DEF] (none)
set-mode = r

# +--------------------------+
# | SADMIN Committee Section |
# +--------------------------+
#
# The SADMIN (aka. Services Admin) committee is a committee where its members
# are specified by the operserv.services-admin lines and cannot be added or
# removed runtime.  The SADMIN committee is the had of the SOP and ADMIN
# committees, and otherwise works exactly like any other committee.
[commserv.sadmin]

# [REQ] The name of this committee.  This can be anything you like as long
# as it does not have special characters or whitespace in it.
# [DEF] SADMIN
name = SADMIN

# [OPT] Is a user required to be an IRC Operator (mode +o) to be recognized as
# a member of this committee?  If this is set to false, you will be able to have
# users in this committee who are not IRC Operators (which can be handy).
# [DEF] true
mode-o = true

# [OPT] Modes to set on users when they are recognized as bein in this committe.
# Note these modes will *NOT* be removed again when the user is no longer
# recognized as being in this committee.  This requires the IRC server software
# to support SVSMODE or some equivalent.
# [DEF] (none)
#set-mode = 

# +-----------------------+
# | SOP Committee Section |
# +-----------------------+
#
# The SOP (aka. Services Operator) committee is responsible for most services
# related maintenance tasks, such as resetting lost passwords and such.
[commserv.sop]

# [REQ] The name of this committee.  This can be anything you like as long
# as it does not have special characters or whitespace in it.
# [DEF] SOP
name = SOP

# [OPT] Is a user required to be an IRC Operator (mode +o) to be recognized as
# a member of this committee?  If this is set to false, you will be able to have
# users in this committee who are not IRC Operators (which can be handy).
# [DEF] true
mode-o = true

# [OPT] Modes to set on users when they are recognized as bein in this committe.
# Note these modes will *NOT* be removed again when the user is no longer
# recognized as being in this committee.  This requires the IRC server software
# to support SVSMODE or some equivalent.
# [DEF] (none)
set-mode = a

# +-------------------------+
# | ADMIN Committee Section |
# +-------------------------+
#
# The ADMIN (aka. Server Admin) committee is designed to be a committee that
# consists of server administrators on the network.  It does not give much
# more access than members of the OPER committee get, however the ADMIN
# committee is the had of the OPER committee, and as such can add and remove
# members on the OPER committee (presumably when they add/remove opers).
[commserv.admin]

# [REQ] The name of this committee.  This can be anything you like as long
# as it does not have special characters or whitespace in it.
# [DEF] ADMIN
name = ADMIN

# [OPT] Is a user required to be an IRC Operator (mode +o) to be recognized as
# a member of this committee?  If this is set to false, you will be able to have
# users in this committee who are not IRC Operators (which can be handy).
# [DEF] true
mode-o = true

# [OPT] Modes to set on users when they are recognized as bein in this committe.
# Note these modes will *NOT* be removed again when the user is no longer
# recognized as being in this committee.  This requires the IRC server software
# to support SVSMODE or some equivalent.
# [DEF] (none)
set-mode = A

# +------------------------+
# | OPER Committee Section |
# +------------------------+
#
# The OPER (aka. IRC Operator) committee is designed to be a committee that
# consists of all IRC operators on the network.  This allows IRC operators
# to use the 'control' mechanisms of services (such as AKILL).  This is the
# lowest of the 'privileged' committees.
[commserv.oper]

# [REQ] The name of this committee.  This can be anything you like as long
# as it does not have special characters or whitespace in it.
# [DEF] OPER
name = OPER

# [OPT] Is a user required to be an IRC Operator (mode +o) to be recognized as
# a member of this committee?  If this is set to false, you will be able to have
# users in this committee who are not IRC Operators (which can be handy).
# [DEF] true
mode-o = true

# [OPT] Modes to set on users when they are recognized as bein in this committe.
# Note these modes will *NOT* be removed again when the user is no longer
# recognized as being in this committee.  This requires the IRC server software
# to support SVSMODE or some equivalent.
# [DEF] (none)
#set-mode = 

# +----------------------------+
# | CommServ Overrides Section |
# +----------------------------+
#
# This section defines what committees a user must be in to be able to perform
# certain tasks without necessarily having appropriate access to do so.
[commserv.overrides]

# [OPT] Access to view information about nicknames, channels, committees, etc.
# that usually only the members (or owner) would be able to see.  This includes
# things such as member/access lists, the current channel modes and levels, etc.
# This does not give any access to alter any information, just see it.
# [DEF] OPER
view = OPER

# [OPT] Access to change the owner of a channel or committee.  This is important
# since sometimes the owner has left the network, and there is no cofounder or
# they too are gone, but the channel (or committee) is still alive and well, but
# now there is nobody who can do things such as change settings, etc.
# [DEF] SADMIN
owner = SADMIN

# [OPT] Access to set channel modes (except user-based modes such as +o, +v, etc).
# [DEF] SOP
mode = SOP

# [OPT] Access to use the OP/DEOP command on anyone, even if the channel is not
# registered.
# [DEF] SOP
op = SOP

# [OPT] Access to use the HALFOP/DEHALFOP command on anyone, even if the channel is
# not registered.
# [DEF] ADMIN
halfop = ADMIN

# [OPT] Access to use the VOICE/DEVOICE command on anyone, even if the channel is
# not registered.
# [DEF] OPER
voice = OPER

# [OPT] Access to use the INVITE command on anyone, even if the channel is not
# registered.
# [DEF] SOP
invite = SOP

# [OPT] Access to use the KICK command on anyone, even if the channel is not
# registered.
# [DEF] SOP
kick = SOP

# [OPT] Access to use the UNBAN command on anyone, even if the channel is not
# registered.
# [DEF] SOP
unban = SOP

# [OPT] Access to use the CLEAR command, even if the channel is not registered.
# [DEF] SADMIN
clear = SADMIN

# END FILE
